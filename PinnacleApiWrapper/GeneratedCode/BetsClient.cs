//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.1.3.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace Ps3838.Bets
{
    using System = global::System;
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.3.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial interface IBetsClient
    {
        /// <summary>Place straight bet - v1</summary>
        /// <param name="request">The Place StraightBet request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<PlaceBetResponse> V1BetsPlaceAsync(PlaceBetRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Place straight bet - v1</summary>
        /// <param name="request">The Place StraightBet request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<PlaceBetResponse> V1BetsPlaceAsync(PlaceBetRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Place straight bet  - v2</summary>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlaceBetResponseV2> V2BetsPlaceAsync(PlaceBetRequestV2 request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Place straight bet  - v2</summary>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlaceBetResponseV2> V2BetsPlaceAsync(PlaceBetRequestV2 request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Place parlay bet - v1</summary>
        /// <param name="request">The Parlay request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<PlaceParlayBetResponse> V1BetsParlayAsync(PlaceParlayBetRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Place parlay bet - v1</summary>
        /// <param name="request">The Parlay request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<PlaceParlayBetResponse> V1BetsParlayAsync(PlaceParlayBetRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Place parlay bet - v2</summary>
        /// <param name="request">The Parlay request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlaceParlayBetResponseV2> V2BetsParlayAsync(PlaceParlayBetRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Place parlay bet - v2</summary>
        /// <param name="request">The Parlay request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlaceParlayBetResponseV2> V2BetsParlayAsync(PlaceParlayBetRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Place teaser bet - v1</summary>
        /// <param name="request">The PlaceTeaser request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlaceTeaserBetResponse> V1BetsTeaserAsync(PlaceTeaserBetRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Place teaser bet - v1</summary>
        /// <param name="request">The PlaceTeaser request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<PlaceTeaserBetResponse> V1BetsTeaserAsync(PlaceTeaserBetRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Place specials bet - v2</summary>
        /// <param name="request">The SpecialBet request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultiBetResponseOfSpecialBetResponse> V2BetsSpecialAsync(MultiBetRequestOfSpecialBetRequest request);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Place specials bet - v2</summary>
        /// <param name="request">The SpecialBet request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<MultiBetResponseOfSpecialBetResponse> V2BetsSpecialAsync(MultiBetRequestOfSpecialBetRequest request, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Bets - v1</summary>
        /// <param name="betlist">Type of bet list to return. Not needed when betids is submitted.</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Difference between fromDate and toDdate can’t be more than 30 days. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <param name="betids">A comma separated list of bet ids. When betids is submitted, no other parameter is necessary. Maximum is 100 ids. Works for all non settled bets and all bets settled in the last 30 days.</param>
        /// <param name="uniqueRequestIds">A comma separated list of uniqueRequestIds to query earlier  placed straight bets. If specified, is treated with highest priority, all other parameters are ignored. Maximum is 10 ids. If client has bet id, preferred way is to use betIds query parameter to check the get the bets. You can use uniqueRequestIds when you do not  have bet id. That’s pretty much in just 2 cases\:
        /// 
        /// 1. When you bet on live event with live delay, place bet response in that case does not return bet id, so client can query bet status by uniqueRequestIds.
        /// 2. In case of any network issues when client is not sure what happened with his place bet request. Empty response means that the bet was not placed. Please check [Deduplication section](https://www.pinnacle.com/de/api/manual#overview) 
        /// for more details
        /// 
        /// 
        /// Note that there is a restriction: querying by uniqueRequestIds  is supported only for straight bets and only up to 30 min from the moment the bet was place.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetBetsByTypeResponse> V1BetsAsync(Betlist? betlist, string fromDate, string toDate, System.Collections.Generic.IEnumerable<long> betids, System.Collections.Generic.IEnumerable<string> uniqueRequestIds);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Bets - v1</summary>
        /// <param name="betlist">Type of bet list to return. Not needed when betids is submitted.</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Difference between fromDate and toDdate can’t be more than 30 days. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <param name="betids">A comma separated list of bet ids. When betids is submitted, no other parameter is necessary. Maximum is 100 ids. Works for all non settled bets and all bets settled in the last 30 days.</param>
        /// <param name="uniqueRequestIds">A comma separated list of uniqueRequestIds to query earlier  placed straight bets. If specified, is treated with highest priority, all other parameters are ignored. Maximum is 10 ids. If client has bet id, preferred way is to use betIds query parameter to check the get the bets. You can use uniqueRequestIds when you do not  have bet id. That’s pretty much in just 2 cases\:
        /// 
        /// 1. When you bet on live event with live delay, place bet response in that case does not return bet id, so client can query bet status by uniqueRequestIds.
        /// 2. In case of any network issues when client is not sure what happened with his place bet request. Empty response means that the bet was not placed. Please check [Deduplication section](https://www.pinnacle.com/de/api/manual#overview) 
        /// for more details
        /// 
        /// 
        /// Note that there is a restriction: querying by uniqueRequestIds  is supported only for straight bets and only up to 30 min from the moment the bet was place.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetBetsByTypeResponse> V1BetsAsync(Betlist? betlist, string fromDate, string toDate, System.Collections.Generic.IEnumerable<long> betids, System.Collections.Generic.IEnumerable<string> uniqueRequestIds, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Bets - v3</summary>
        /// <param name="betlist">Type of bet list to return. Not needed when betids is submitted.</param>
        /// <param name="betStatuses">Type of bet statuse to return. This works only in conjustion with betlist, as additional filter.</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Start date can be up to 30 days in the past. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <param name="sortDir">Sort direction by postedAt/settledAt. Respected only when querying by date range.</param>
        /// <param name="pageSize">Page size in case. Max is 1000. Respected only when querying by date range.</param>
        /// <param name="fromRecord">Starting record (inclusive) of the result. Respected only when querying by date range. To fetch next page set it to toRecord+1</param>
        /// <param name="betids">A comma separated list of bet ids. When betids is submitted, no other parameter is necessary. Maximum is 100 ids. Works for all non settled bets and all bets settled in the last 30 days.</param>
        /// <param name="uniqueRequestIds">A comma separated list of uniqueRequestIds to query earlier  placed straight bets. If specified, is treated with highest priority, all other parameters are ignored. Maximum is 10 ids. If client has bet id, preferred way is to use betIds query parameter to check the get the bets. You can use uniqueRequestIds when you do not  have bet id. That’s pretty much in just 2 cases\:
        /// 
        /// 1. When you bet on live event with live delay, place bet response in that case does not return bet id, so client can query bet status by uniqueRequestIds.
        /// 2. In case of any network issues when client is not sure what happened with his place bet request. Empty response means that the bet was not placed. Please check [Deduplication section](https://www.pinnacle.com/de/api/manual#overview) for more details
        /// 
        /// 
        /// Note that there is a restriction: querying by uniqueRequestIds  is supported only for straight bets and only up to 30 min from the moment the bet was place.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBetsByTypeResponseV3> V3BetsAsync(Betlist2? betlist, System.Collections.Generic.IEnumerable<Anonymous> betStatuses, string fromDate, string toDate, SortDir? sortDir, int? pageSize, int? fromRecord, System.Collections.Generic.IEnumerable<long> betids, System.Collections.Generic.IEnumerable<string> uniqueRequestIds);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Bets - v3</summary>
        /// <param name="betlist">Type of bet list to return. Not needed when betids is submitted.</param>
        /// <param name="betStatuses">Type of bet statuse to return. This works only in conjustion with betlist, as additional filter.</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Start date can be up to 30 days in the past. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <param name="sortDir">Sort direction by postedAt/settledAt. Respected only when querying by date range.</param>
        /// <param name="pageSize">Page size in case. Max is 1000. Respected only when querying by date range.</param>
        /// <param name="fromRecord">Starting record (inclusive) of the result. Respected only when querying by date range. To fetch next page set it to toRecord+1</param>
        /// <param name="betids">A comma separated list of bet ids. When betids is submitted, no other parameter is necessary. Maximum is 100 ids. Works for all non settled bets and all bets settled in the last 30 days.</param>
        /// <param name="uniqueRequestIds">A comma separated list of uniqueRequestIds to query earlier  placed straight bets. If specified, is treated with highest priority, all other parameters are ignored. Maximum is 10 ids. If client has bet id, preferred way is to use betIds query parameter to check the get the bets. You can use uniqueRequestIds when you do not  have bet id. That’s pretty much in just 2 cases\:
        /// 
        /// 1. When you bet on live event with live delay, place bet response in that case does not return bet id, so client can query bet status by uniqueRequestIds.
        /// 2. In case of any network issues when client is not sure what happened with his place bet request. Empty response means that the bet was not placed. Please check [Deduplication section](https://www.pinnacle.com/de/api/manual#overview) for more details
        /// 
        /// 
        /// Note that there is a restriction: querying by uniqueRequestIds  is supported only for straight bets and only up to 30 min from the moment the bet was place.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBetsByTypeResponseV3> V3BetsAsync(Betlist2? betlist, System.Collections.Generic.IEnumerable<Anonymous> betStatuses, string fromDate, string toDate, SortDir? sortDir, int? pageSize, int? fromRecord, System.Collections.Generic.IEnumerable<long> betids, System.Collections.Generic.IEnumerable<string> uniqueRequestIds, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Bets Settled - v1</summary>
        /// <param name="eventId">Event identification</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Start date can be up to 30 days in the past. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetBetsByTypeResponse> V1BetsSettledAsync(long? eventId, string fromDate, string toDate);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Bets Settled - v1</summary>
        /// <param name="eventId">Event identification</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Start date can be up to 30 days in the past. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        [System.Obsolete]
        System.Threading.Tasks.Task<GetBetsByTypeResponse> V1BetsSettledAsync(long? eventId, string fromDate, string toDate, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Bets Settled - v3</summary>
        /// <param name="eventId">Event identification</param>
        /// <param name="specialId">Id of the special.</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Start date can be up to 30 days in the past. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <param name="sortDir">Sort direction by postedAt/settledAt. Respected only when querying by date range.</param>
        /// <param name="pageSize">Page size in case. Max is 1000. Respected only when querying by date range.</param>
        /// <param name="fromRecord">Starting record (inclusive) of the result. Respected only when querying by date range. To fetch next page set it to toRecord+1</param>
        /// <param name="uniqueRequestIds">A comma separated list of uniqueRequestIds to query earlier  placed straight bets. If specified, is treated with highest priority, all other parameters are ignored. Maximum is 10 ids. If client has bet id, preferred way is to use betIds query parameter to check the get the bets. You can use uniqueRequestIds when you do not  have bet id. That’s pretty much in just 2 cases\:
        /// 
        /// 1. When you bet on live event with live delay, place bet response in that case does not return bet id, so client can query bet status by uniqueRequestIds.
        /// 2. In case of any network issues when client is not sure what happened with his place bet request. Empty response means that the bet was not placed. Please check [Deduplication section](https://www.pinnacle.com/de/api/manual#overview) for more details
        /// 
        /// 
        /// Note that there is a restriction: querying by uniqueRequestIds  is supported only for straight bets and only up to 30 min from the moment the bet was place.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBetsByTypeResponseV3> V3BetsSettledAsync(long? eventId, long? specialId, string fromDate, string toDate, SortDir2? sortDir, int? pageSize, int? fromRecord, System.Collections.Generic.IEnumerable<string> uniqueRequestIds);
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Bets Settled - v3</summary>
        /// <param name="eventId">Event identification</param>
        /// <param name="specialId">Id of the special.</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Start date can be up to 30 days in the past. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <param name="sortDir">Sort direction by postedAt/settledAt. Respected only when querying by date range.</param>
        /// <param name="pageSize">Page size in case. Max is 1000. Respected only when querying by date range.</param>
        /// <param name="fromRecord">Starting record (inclusive) of the result. Respected only when querying by date range. To fetch next page set it to toRecord+1</param>
        /// <param name="uniqueRequestIds">A comma separated list of uniqueRequestIds to query earlier  placed straight bets. If specified, is treated with highest priority, all other parameters are ignored. Maximum is 10 ids. If client has bet id, preferred way is to use betIds query parameter to check the get the bets. You can use uniqueRequestIds when you do not  have bet id. That’s pretty much in just 2 cases\:
        /// 
        /// 1. When you bet on live event with live delay, place bet response in that case does not return bet id, so client can query bet status by uniqueRequestIds.
        /// 2. In case of any network issues when client is not sure what happened with his place bet request. Empty response means that the bet was not placed. Please check [Deduplication section](https://www.pinnacle.com/de/api/manual#overview) for more details
        /// 
        /// 
        /// Note that there is a restriction: querying by uniqueRequestIds  is supported only for straight bets and only up to 30 min from the moment the bet was place.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<GetBetsByTypeResponseV3> V3BetsSettledAsync(long? eventId, long? specialId, string fromDate, string toDate, SortDir2? sortDir, int? pageSize, int? fromRecord, System.Collections.Generic.IEnumerable<string> uniqueRequestIds, System.Threading.CancellationToken cancellationToken);
    
        /// <summary>Get Betting Status</summary>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BettingStatusResponse> V1BetsBettingStatusAsync();
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Betting Status</summary>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        System.Threading.Tasks.Task<BettingStatusResponse> V1BetsBettingStatusAsync(System.Threading.CancellationToken cancellationToken);
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.3.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BetsClient : IBetsClient
    {
        private string _baseUrl = "https://api.ps3838.com";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public BetsClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <summary>Place straight bet - v1</summary>
        /// <param name="request">The Place StraightBet request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<PlaceBetResponse> V1BetsPlaceAsync(PlaceBetRequest request)
        {
            return V1BetsPlaceAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Place straight bet - v1</summary>
        /// <param name="request">The Place StraightBet request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<PlaceBetResponse> V1BetsPlaceAsync(PlaceBetRequest request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/bets/place");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json; charset=utf-8");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json; charset=utf-8"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlaceBetResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("BadRequest", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseWithErrorRef>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponseWithErrorRef>("InternalServerError", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new BetsApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PlaceBetResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Place straight bet  - v2</summary>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PlaceBetResponseV2> V2BetsPlaceAsync(PlaceBetRequestV2 request)
        {
            return V2BetsPlaceAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Place straight bet  - v2</summary>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PlaceBetResponseV2> V2BetsPlaceAsync(PlaceBetRequestV2 request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/bets/place");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlaceBetResponseV2>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("BadRequest", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseWithErrorRef>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponseWithErrorRef>("InternalServerError", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new BetsApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PlaceBetResponseV2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Place parlay bet - v1</summary>
        /// <param name="request">The Parlay request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<PlaceParlayBetResponse> V1BetsParlayAsync(PlaceParlayBetRequest request)
        {
            return V1BetsParlayAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Place parlay bet - v1</summary>
        /// <param name="request">The Parlay request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<PlaceParlayBetResponse> V1BetsParlayAsync(PlaceParlayBetRequest request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/bets/parlay");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlaceParlayBetResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("BadRequest", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseWithErrorRef>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponseWithErrorRef>("InternalServerError", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new BetsApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PlaceParlayBetResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Place parlay bet - v2</summary>
        /// <param name="request">The Parlay request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PlaceParlayBetResponseV2> V2BetsParlayAsync(PlaceParlayBetRequest request)
        {
            return V2BetsParlayAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Place parlay bet - v2</summary>
        /// <param name="request">The Parlay request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PlaceParlayBetResponseV2> V2BetsParlayAsync(PlaceParlayBetRequest request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/bets/parlay");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlaceParlayBetResponseV2>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("BadRequest", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseWithErrorRef>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponseWithErrorRef>("InternalServerError", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new BetsApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PlaceParlayBetResponseV2);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Place teaser bet - v1</summary>
        /// <param name="request">The PlaceTeaser request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<PlaceTeaserBetResponse> V1BetsTeaserAsync(PlaceTeaserBetRequest request)
        {
            return V1BetsTeaserAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Place teaser bet - v1</summary>
        /// <param name="request">The PlaceTeaser request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<PlaceTeaserBetResponse> V1BetsTeaserAsync(PlaceTeaserBetRequest request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/bets/teaser");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<PlaceTeaserBetResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("BadRequest", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseWithErrorRef>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponseWithErrorRef>("InternalServerError", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new BetsApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(PlaceTeaserBetResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Place specials bet - v2</summary>
        /// <param name="request">The SpecialBet request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<MultiBetResponseOfSpecialBetResponse> V2BetsSpecialAsync(MultiBetRequestOfSpecialBetRequest request)
        {
            return V2BetsSpecialAsync(request, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Place specials bet - v2</summary>
        /// <param name="request">The SpecialBet request.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<MultiBetResponseOfSpecialBetResponse> V2BetsSpecialAsync(MultiBetRequestOfSpecialBetRequest request, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v2/bets/special");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    var content_ = new System.Net.Http.StringContent(Newtonsoft.Json.JsonConvert.SerializeObject(request, _settings.Value));
                    content_.Headers.ContentType = System.Net.Http.Headers.MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new System.Net.Http.HttpMethod("POST");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<MultiBetResponseOfSpecialBetResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("BadRequest", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseWithErrorRef>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponseWithErrorRef>("InternalServerError", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new BetsApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(MultiBetResponseOfSpecialBetResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Bets - v1</summary>
        /// <param name="betlist">Type of bet list to return. Not needed when betids is submitted.</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Difference between fromDate and toDdate can’t be more than 30 days. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <param name="betids">A comma separated list of bet ids. When betids is submitted, no other parameter is necessary. Maximum is 100 ids. Works for all non settled bets and all bets settled in the last 30 days.</param>
        /// <param name="uniqueRequestIds">A comma separated list of uniqueRequestIds to query earlier  placed straight bets. If specified, is treated with highest priority, all other parameters are ignored. Maximum is 10 ids. If client has bet id, preferred way is to use betIds query parameter to check the get the bets. You can use uniqueRequestIds when you do not  have bet id. That’s pretty much in just 2 cases\:
        /// 
        /// 1. When you bet on live event with live delay, place bet response in that case does not return bet id, so client can query bet status by uniqueRequestIds.
        /// 2. In case of any network issues when client is not sure what happened with his place bet request. Empty response means that the bet was not placed. Please check [Deduplication section](https://www.pinnacle.com/de/api/manual#overview) 
        /// for more details
        /// 
        /// 
        /// Note that there is a restriction: querying by uniqueRequestIds  is supported only for straight bets and only up to 30 min from the moment the bet was place.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<GetBetsByTypeResponse> V1BetsAsync(Betlist? betlist, string fromDate, string toDate, System.Collections.Generic.IEnumerable<long> betids, System.Collections.Generic.IEnumerable<string> uniqueRequestIds)
        {
            return V1BetsAsync(betlist, fromDate, toDate, betids, uniqueRequestIds, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Bets - v1</summary>
        /// <param name="betlist">Type of bet list to return. Not needed when betids is submitted.</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Difference between fromDate and toDdate can’t be more than 30 days. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <param name="betids">A comma separated list of bet ids. When betids is submitted, no other parameter is necessary. Maximum is 100 ids. Works for all non settled bets and all bets settled in the last 30 days.</param>
        /// <param name="uniqueRequestIds">A comma separated list of uniqueRequestIds to query earlier  placed straight bets. If specified, is treated with highest priority, all other parameters are ignored. Maximum is 10 ids. If client has bet id, preferred way is to use betIds query parameter to check the get the bets. You can use uniqueRequestIds when you do not  have bet id. That’s pretty much in just 2 cases\:
        /// 
        /// 1. When you bet on live event with live delay, place bet response in that case does not return bet id, so client can query bet status by uniqueRequestIds.
        /// 2. In case of any network issues when client is not sure what happened with his place bet request. Empty response means that the bet was not placed. Please check [Deduplication section](https://www.pinnacle.com/de/api/manual#overview) 
        /// for more details
        /// 
        /// 
        /// Note that there is a restriction: querying by uniqueRequestIds  is supported only for straight bets and only up to 30 min from the moment the bet was place.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<GetBetsByTypeResponse> V1BetsAsync(Betlist? betlist, string fromDate, string toDate, System.Collections.Generic.IEnumerable<long> betids, System.Collections.Generic.IEnumerable<string> uniqueRequestIds, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/bets?");
            if (betlist != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("betlist") + "=").Append(System.Uri.EscapeDataString(ConvertToString(betlist, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (betids != null) 
            {
                foreach (var item_ in betids) { urlBuilder_.Append(System.Uri.EscapeDataString("betids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (uniqueRequestIds != null) 
            {
                foreach (var item_ in uniqueRequestIds) { urlBuilder_.Append(System.Uri.EscapeDataString("uniqueRequestIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBetsByTypeResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("BadRequest", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseWithErrorRef>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponseWithErrorRef>("InternalServerError", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new BetsApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetBetsByTypeResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Bets - v3</summary>
        /// <param name="betlist">Type of bet list to return. Not needed when betids is submitted.</param>
        /// <param name="betStatuses">Type of bet statuse to return. This works only in conjustion with betlist, as additional filter.</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Start date can be up to 30 days in the past. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <param name="sortDir">Sort direction by postedAt/settledAt. Respected only when querying by date range.</param>
        /// <param name="pageSize">Page size in case. Max is 1000. Respected only when querying by date range.</param>
        /// <param name="fromRecord">Starting record (inclusive) of the result. Respected only when querying by date range. To fetch next page set it to toRecord+1</param>
        /// <param name="betids">A comma separated list of bet ids. When betids is submitted, no other parameter is necessary. Maximum is 100 ids. Works for all non settled bets and all bets settled in the last 30 days.</param>
        /// <param name="uniqueRequestIds">A comma separated list of uniqueRequestIds to query earlier  placed straight bets. If specified, is treated with highest priority, all other parameters are ignored. Maximum is 10 ids. If client has bet id, preferred way is to use betIds query parameter to check the get the bets. You can use uniqueRequestIds when you do not  have bet id. That’s pretty much in just 2 cases\:
        /// 
        /// 1. When you bet on live event with live delay, place bet response in that case does not return bet id, so client can query bet status by uniqueRequestIds.
        /// 2. In case of any network issues when client is not sure what happened with his place bet request. Empty response means that the bet was not placed. Please check [Deduplication section](https://www.pinnacle.com/de/api/manual#overview) for more details
        /// 
        /// 
        /// Note that there is a restriction: querying by uniqueRequestIds  is supported only for straight bets and only up to 30 min from the moment the bet was place.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetBetsByTypeResponseV3> V3BetsAsync(Betlist2? betlist, System.Collections.Generic.IEnumerable<Anonymous> betStatuses, string fromDate, string toDate, SortDir? sortDir, int? pageSize, int? fromRecord, System.Collections.Generic.IEnumerable<long> betids, System.Collections.Generic.IEnumerable<string> uniqueRequestIds)
        {
            return V3BetsAsync(betlist, betStatuses, fromDate, toDate, sortDir, pageSize, fromRecord, betids, uniqueRequestIds, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Bets - v3</summary>
        /// <param name="betlist">Type of bet list to return. Not needed when betids is submitted.</param>
        /// <param name="betStatuses">Type of bet statuse to return. This works only in conjustion with betlist, as additional filter.</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Start date can be up to 30 days in the past. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <param name="sortDir">Sort direction by postedAt/settledAt. Respected only when querying by date range.</param>
        /// <param name="pageSize">Page size in case. Max is 1000. Respected only when querying by date range.</param>
        /// <param name="fromRecord">Starting record (inclusive) of the result. Respected only when querying by date range. To fetch next page set it to toRecord+1</param>
        /// <param name="betids">A comma separated list of bet ids. When betids is submitted, no other parameter is necessary. Maximum is 100 ids. Works for all non settled bets and all bets settled in the last 30 days.</param>
        /// <param name="uniqueRequestIds">A comma separated list of uniqueRequestIds to query earlier  placed straight bets. If specified, is treated with highest priority, all other parameters are ignored. Maximum is 10 ids. If client has bet id, preferred way is to use betIds query parameter to check the get the bets. You can use uniqueRequestIds when you do not  have bet id. That’s pretty much in just 2 cases\:
        /// 
        /// 1. When you bet on live event with live delay, place bet response in that case does not return bet id, so client can query bet status by uniqueRequestIds.
        /// 2. In case of any network issues when client is not sure what happened with his place bet request. Empty response means that the bet was not placed. Please check [Deduplication section](https://www.pinnacle.com/de/api/manual#overview) for more details
        /// 
        /// 
        /// Note that there is a restriction: querying by uniqueRequestIds  is supported only for straight bets and only up to 30 min from the moment the bet was place.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetBetsByTypeResponseV3> V3BetsAsync(Betlist2? betlist, System.Collections.Generic.IEnumerable<Anonymous> betStatuses, string fromDate, string toDate, SortDir? sortDir, int? pageSize, int? fromRecord, System.Collections.Generic.IEnumerable<long> betids, System.Collections.Generic.IEnumerable<string> uniqueRequestIds, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v3/bets?");
            if (betlist != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("betlist") + "=").Append(System.Uri.EscapeDataString(ConvertToString(betlist, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (betStatuses != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("betStatuses") + "=").Append(System.Uri.EscapeDataString(ConvertToString(betStatuses, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortDir != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sortDir") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sortDir, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromRecord != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromRecord") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromRecord, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (betids != null) 
            {
                foreach (var item_ in betids) { urlBuilder_.Append(System.Uri.EscapeDataString("betids") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (uniqueRequestIds != null) 
            {
                foreach (var item_ in uniqueRequestIds) { urlBuilder_.Append(System.Uri.EscapeDataString("uniqueRequestIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBetsByTypeResponseV3>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("BadRequest", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseWithErrorRef>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponseWithErrorRef>("InternalServerError", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new BetsApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetBetsByTypeResponseV3);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Bets Settled - v1</summary>
        /// <param name="eventId">Event identification</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Start date can be up to 30 days in the past. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public System.Threading.Tasks.Task<GetBetsByTypeResponse> V1BetsSettledAsync(long? eventId, string fromDate, string toDate)
        {
            return V1BetsSettledAsync(eventId, fromDate, toDate, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Bets Settled - v1</summary>
        /// <param name="eventId">Event identification</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Start date can be up to 30 days in the past. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        [System.Obsolete]
        public async System.Threading.Tasks.Task<GetBetsByTypeResponse> V1BetsSettledAsync(long? eventId, string fromDate, string toDate, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/bets/settled?");
            if (eventId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("eventId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBetsByTypeResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("BadRequest", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseWithErrorRef>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponseWithErrorRef>("InternalServerError", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new BetsApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetBetsByTypeResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Bets Settled - v3</summary>
        /// <param name="eventId">Event identification</param>
        /// <param name="specialId">Id of the special.</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Start date can be up to 30 days in the past. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <param name="sortDir">Sort direction by postedAt/settledAt. Respected only when querying by date range.</param>
        /// <param name="pageSize">Page size in case. Max is 1000. Respected only when querying by date range.</param>
        /// <param name="fromRecord">Starting record (inclusive) of the result. Respected only when querying by date range. To fetch next page set it to toRecord+1</param>
        /// <param name="uniqueRequestIds">A comma separated list of uniqueRequestIds to query earlier  placed straight bets. If specified, is treated with highest priority, all other parameters are ignored. Maximum is 10 ids. If client has bet id, preferred way is to use betIds query parameter to check the get the bets. You can use uniqueRequestIds when you do not  have bet id. That’s pretty much in just 2 cases\:
        /// 
        /// 1. When you bet on live event with live delay, place bet response in that case does not return bet id, so client can query bet status by uniqueRequestIds.
        /// 2. In case of any network issues when client is not sure what happened with his place bet request. Empty response means that the bet was not placed. Please check [Deduplication section](https://www.pinnacle.com/de/api/manual#overview) for more details
        /// 
        /// 
        /// Note that there is a restriction: querying by uniqueRequestIds  is supported only for straight bets and only up to 30 min from the moment the bet was place.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<GetBetsByTypeResponseV3> V3BetsSettledAsync(long? eventId, long? specialId, string fromDate, string toDate, SortDir2? sortDir, int? pageSize, int? fromRecord, System.Collections.Generic.IEnumerable<string> uniqueRequestIds)
        {
            return V3BetsSettledAsync(eventId, specialId, fromDate, toDate, sortDir, pageSize, fromRecord, uniqueRequestIds, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Bets Settled - v3</summary>
        /// <param name="eventId">Event identification</param>
        /// <param name="specialId">Id of the special.</param>
        /// <param name="fromDate">Start date of the requested period. Required when betlist parameter is submitted. Start date can be up to 30 days in the past. Expected format is ISO8601 - can be set to just date or date and time.</param>
        /// <param name="toDate">End date of the requested period. Required when betlist parameter is submitted. Expected format is ISO8601 - can be set to just date or date and time.  toDate value is exclusive, meaning it cannot be equal to fromDate.</param>
        /// <param name="sortDir">Sort direction by postedAt/settledAt. Respected only when querying by date range.</param>
        /// <param name="pageSize">Page size in case. Max is 1000. Respected only when querying by date range.</param>
        /// <param name="fromRecord">Starting record (inclusive) of the result. Respected only when querying by date range. To fetch next page set it to toRecord+1</param>
        /// <param name="uniqueRequestIds">A comma separated list of uniqueRequestIds to query earlier  placed straight bets. If specified, is treated with highest priority, all other parameters are ignored. Maximum is 10 ids. If client has bet id, preferred way is to use betIds query parameter to check the get the bets. You can use uniqueRequestIds when you do not  have bet id. That’s pretty much in just 2 cases\:
        /// 
        /// 1. When you bet on live event with live delay, place bet response in that case does not return bet id, so client can query bet status by uniqueRequestIds.
        /// 2. In case of any network issues when client is not sure what happened with his place bet request. Empty response means that the bet was not placed. Please check [Deduplication section](https://www.pinnacle.com/de/api/manual#overview) for more details
        /// 
        /// 
        /// Note that there is a restriction: querying by uniqueRequestIds  is supported only for straight bets and only up to 30 min from the moment the bet was place.</param>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<GetBetsByTypeResponseV3> V3BetsSettledAsync(long? eventId, long? specialId, string fromDate, string toDate, SortDir2? sortDir, int? pageSize, int? fromRecord, System.Collections.Generic.IEnumerable<string> uniqueRequestIds, System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v3/bets/settled?");
            if (eventId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("eventId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(eventId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (specialId != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("specialId") + "=").Append(System.Uri.EscapeDataString(ConvertToString(specialId, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (toDate != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("toDate") + "=").Append(System.Uri.EscapeDataString(ConvertToString(toDate, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (sortDir != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("sortDir") + "=").Append(System.Uri.EscapeDataString(ConvertToString(sortDir, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (pageSize != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pageSize") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pageSize, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (fromRecord != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("fromRecord") + "=").Append(System.Uri.EscapeDataString(ConvertToString(fromRecord, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (uniqueRequestIds != null) 
            {
                foreach (var item_ in uniqueRequestIds) { urlBuilder_.Append(System.Uri.EscapeDataString("uniqueRequestIds") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<GetBetsByTypeResponseV3>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("BadRequest", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseWithErrorRef>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponseWithErrorRef>("InternalServerError", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new BetsApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(GetBetsByTypeResponseV3);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <summary>Get Betting Status</summary>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<BettingStatusResponse> V1BetsBettingStatusAsync()
        {
            return V1BetsBettingStatusAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>Get Betting Status</summary>
        /// <returns>OK</returns>
        /// <exception cref="BetsApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<BettingStatusResponse> V1BetsBettingStatusAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/v1/bets/betting-status");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<BettingStatusResponse>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "401") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Unauthorized", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "403") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponse>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponse>("Forbidden", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ == "500") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<ErrorResponseWithErrorRef>(response_, headers_).ConfigureAwait(false);
                            throw new BetsApiException<ErrorResponseWithErrorRef>("InternalServerError", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new BetsApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(BettingStatusResponse);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new BetsApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new BetsApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    /// <summary>Request to place a bet.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PlaceBetRequest 
    {
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat? OddsFormat { get; set; }
    
        /// <summary>This is a Unique ID for PlaceBet requests. This is to support idempotent requests.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId { get; set; }
    
        /// <summary>Whether or not to accept a bet when there is a line change in favor of the client.</summary>
        [Newtonsoft.Json.JsonProperty("acceptBetterLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AcceptBetterLine { get; set; }
    
        /// <summary>amount in client’s currency.</summary>
        [Newtonsoft.Json.JsonProperty("stake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Stake { get; set; }
    
        /// <summary>Whether the stake amount is risk or win amount.</summary>
        [Newtonsoft.Json.JsonProperty("winRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetRequestWinRiskStake? WinRiskStake { get; set; }
    
        /// <summary>Line identification.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId { get; set; }
    
        /// <summary>Alternate line identification.</summary>
        [Newtonsoft.Json.JsonProperty("altLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AltLineId { get; set; }
    
        /// <summary>Baseball only. Refers to the pitcher for Team1. This applicable only for MONEYLINE bet type, for all other bet types this has to be TRUE.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher1MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher1MustStart { get; set; }
    
        /// <summary>Baseball only. Refers to the pitcher for Team2. This applicable only for MONEYLINE bet type, for all other bet types this has to be TRUE.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher2MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher2MustStart { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodNumber { get; set; }
    
        /// <summary>Bet type.</summary>
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetRequestBetType? BetType { get; set; }
    
        /// <summary>Team type.</summary>
        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetRequestTeam? Team { get; set; }
    
        /// <summary>Side type.</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetRequestSide? Side { get; set; }
    
    
    }
    
    /// <summary>Request to place a bet.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PlaceBetRequestV2 
    {
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat? OddsFormat { get; set; }
    
        /// <summary>This is a Unique ID for PlaceBet requests. This is to support idempotent requests.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId { get; set; }
    
        /// <summary>Whether or not to accept a bet when there is a line change in favor of the client.</summary>
        [Newtonsoft.Json.JsonProperty("acceptBetterLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AcceptBetterLine { get; set; }
    
        /// <summary>amount in client’s currency.</summary>
        [Newtonsoft.Json.JsonProperty("stake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Stake { get; set; }
    
        /// <summary>Whether the stake amount is risk or win amount.</summary>
        [Newtonsoft.Json.JsonProperty("winRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetRequestV2WinRiskStake? WinRiskStake { get; set; }
    
        /// <summary>Line identification.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId { get; set; }
    
        /// <summary>Alternate line identification.</summary>
        [Newtonsoft.Json.JsonProperty("altLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AltLineId { get; set; }
    
        /// <summary>Baseball only. Refers to the pitcher for Team1. This applicable only for MONEYLINE bet type, for all other bet types this has to be TRUE.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher1MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher1MustStart { get; set; }
    
        /// <summary>Baseball only. Refers to the pitcher for Team2. This applicable only for MONEYLINE bet type, for all other bet types this has to be TRUE.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher2MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher2MustStart { get; set; }
    
        /// <summary>NORMAL - bet will be placed on specified stake.  
        /// FILLANDKILL - If the stake is over the max limit, bet will be placed on max limit, otherwise it will be placed on specified stake.  
        /// FILLMAXLIMIT - bet will be places on max limit, stake amount will be ignored. Please note that maximum limits can change at any moment, which may result in risking more than anticipated. This option is replacement of isMaxStakeBet from v1/bets/place'
        /// </summary>
        [Newtonsoft.Json.JsonProperty("fillType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetRequestV2FillType? FillType { get; set; } = Ps3838.Bets.PlaceBetRequestV2FillType.NORMAL;
    
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodNumber { get; set; }
    
        /// <summary>Bet type.</summary>
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetRequestV2BetType? BetType { get; set; }
    
        /// <summary>Team type.</summary>
        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetRequestV2Team? Team { get; set; }
    
        /// <summary>Side type.</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetRequestV2Side? Side { get; set; }
    
        /// <summary>This is optional parameter for SPREAD, TOTAL_POINTS and TEAM_TOTAL_POINTS bet types.</summary>
        [Newtonsoft.Json.JsonProperty("handicap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Handicap { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PlaceBetResponse 
    {
        /// <summary>Status of the response.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetResponseStatus? Status { get; set; }
    
        /// <summary>If Status is PROCESSED_WITH_ERROR, errorCode will be in the response. 
        /// 
        /// 
        /// ALL_BETTING_CLOSED = Betting is not allowed at this moment. This may happen during system maintenance,  
        /// ALL_LIVE_BETTING_CLOSED = Live betting is not allowed at this moment. This may happen during system maintenance,  
        /// ABOVE_EVENT_MAX = Bet cannot be placed because client exceeded allowed maximum of risk on a line,  
        /// ABOVE_MAX_BET_AMOUNT = Stake is above allowed maximum amount,  
        /// BELOW_MIN_BET_AMOUNT = Stake is below allowed minimum amount,  
        /// BLOCKED_BETTING = Betting is suspended for the client,  
        /// BLOCKED_CLIENT = Client is no longer active,  
        /// INSUFFICIENT_FUNDS = Bet is submitted by a client with insufficient funds,  
        /// INVALID_COUNTRY = Client country is not allowed for betting,  
        /// INVALID_EVENT = Invalid eventid,  
        /// INVALID_ODDS_FORMAT = If a bet was submitted with the odds format that is not allowed for the client,  
        /// LINE_CHANGED = Bet is submitted on a line that has changed,  
        /// LISTED_PITCHERS_SELECTION_ERROR = If bet was submitted with pitcher1MustStart and/or pitcher2MustStart parameters in Place Bet request with values that are not allowed,  
        /// OFFLINE_EVENT = Bet is submitted on a event that is offline or the submitted line is not offered at the moment due to points/handicap change or the submitted bet type is just not offered at the moment,  
        /// PAST_CUTOFFTIME = Bet is submitted on a game after the betting cutoff time,  
        /// RED_CARDS_CHANGED = Bet is submitted on a live soccer event with changed red card count,  
        /// SCORE_CHANGED = Bet is submitted on a live soccer event with changed score, 
        /// DUPLICATE_UNIQUE_REQUEST_ID = REquest with the same uniqueRequestId was already processed. Please set the new value if you still want the request to be processed,  
        /// INCOMPLETE_CUSTOMER_BETTING_PROFILE = System configuration issue,  
        /// INVALID_CUSTOMER_PROFILE = System configuration issue,   
        /// LIMITS_CONFIGURATION_ISSUE = System configuration issue,   
        /// RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Client has reached his total loss limit,  
        /// RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Client has reached his total risk limit,  
        /// RESUBMIT_REQUEST = Unable to process the request but the request itself is valid. This happens more often on the live betting in situations when there is more than one place bet request at the same on the same line. When this happens, we don't keep the place bet request on the server until we know if we can accept or reject the bet, but instead we return the error. It's very likely that the line will change after that. To reduce a chance of getting RESUBMIT_REQUEST client can try to place a bet as fast as possible,  
        /// SYSTEM_ERROR_3 = Unexpected error,  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetResponseErrorCode? ErrorCode { get; set; }
    
        /// <summary>The bet ID of the new bet. May be empty on failure.</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BetId { get; set; }
    
        /// <summary>Echo of the uniqueRequestId from the request.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId { get; set; }
    
        /// <summary>Whether or not the bet was accepted on the line that changed in favour of client.
        /// This can be true only if acceptBetterLine in the Place Bet request is set to TRUE.</summary>
        [Newtonsoft.Json.JsonProperty("betterLineWasAccepted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BetterLineWasAccepted { get; set; }
    
        /// <summary>For accepted bets, this will have the price at which the wager is accepted</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorResponse 
    {
        /// <summary>INVALID_REQUEST_DATA  = Invalid request parameters (http status 400)  
        /// SELF_EXCLUSION = Client's account is self-excluded (http status 400)
        /// TERMS_AND_CONDITIONS_NOT_ACCEPTED = Terms and Condidtions has not been accepted (http status 400)
        /// INVALID_CREDENTIALS = Authorization failed, invalid credentials (http status 401)  
        /// INVALID_AUTHORIZATION_HEADER = HTTP Authorization header is missing (http status 401) 
        /// ACCOUNT_INACTIVE = Client's account is not active  (http status 403)  
        /// NO_API_ACCESS = Account not permitted to access the API  (http status 403) 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ErrorResponseCode? Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PlaceBetResponseV2 
    {
        /// <summary>Status of the response.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetResponseV2Status? Status { get; set; }
    
        /// <summary>If Status is PROCESSED_WITH_ERROR, errorCode will be in the response. 
        /// 
        /// ALL_BETTING_CLOSED = Betting is not allowed at this moment. This may happen during system maintenance,  
        /// ALL_LIVE_BETTING_CLOSED = Live betting is not allowed at this moment. This may happen during system maintenance,  
        /// ABOVE_EVENT_MAX = Bet cannot be placed because client exceeded allowed maximum of risk on a line,  
        /// ABOVE_MAX_BET_AMOUNT = Stake is above allowed maximum amount,   
        /// BELOW_MIN_BET_AMOUNT = Stake is below allowed minimum amount,  
        /// BLOCKED_BETTING = Betting is suspended for the client,  
        /// BLOCKED_CLIENT = Client is no longer active,   
        /// INSUFFICIENT_FUNDS = Bet is submitted by a client with insufficient funds,  
        /// INVALID_COUNTRY = Client country is not allowed for betting,  
        /// INVALID_EVENT = Invalid eventid,  
        /// INVALID_ODDS_FORMAT = If a bet was submitted with the odds format that is not allowed for the client,  
        /// LINE_CHANGED = Bet is submitted on a line that has changed,  
        /// LISTED_PITCHERS_SELECTION_ERROR = If bet was submitted with pitcher1MustStart and/or pitcher2MustStart parameters in Place Bet request with values that are not allowed,  
        /// OFFLINE_EVENT = Bet is submitted on a event that is offline or the submitted line is not offered at the moment due to points/handicap change or the submitted bet type is just not offered at the moment,  
        /// PAST_CUTOFFTIME = Bet is submitted on a game after the betting cutoff time,  
        /// RED_CARDS_CHANGED = Bet is submitted on a live soccer event with changed red card count,  
        /// SCORE_CHANGED = Bet is submitted on a live soccer event with changed score,             
        /// DUPLICATE_UNIQUE_REQUEST_ID = Request with the same uniqueRequestId was already processed. Please set the new value if you still want the request to be processed,  
        /// INCOMPLETE_CUSTOMER_BETTING_PROFILE = System configuration issue,  
        /// INVALID_CUSTOMER_PROFILE = System configuration issue,  
        /// LIMITS_CONFIGURATION_ISSUE = System configuration issue,  
        /// RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Client has reached his total loss limit,  
        /// RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Client has reached his total risk limit,  
        /// RESUBMIT_REQUEST = Unable to process the request but the request itself is valid. This happens more often on the live betting in situations when there is more than one place bet request at the same on the same line. When this happens, we don't keep the place bet request on the server until we know if we can accept or reject the bet, but instead we return the error. It's very likely that the line will change after that. To reduce a chance of getting RESUBMIT_REQUEST client can try to place a bet as fast as possible,  
        /// SYSTEM_ERROR_3 = Unexpected error,  
        /// LICENCE_RESTRICTION_LIVE_BETTING_BLOCKED - Live betting blocked due to licence restrictions,
        /// INVALID_HANDICAP = Invalid handicap
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceBetResponseV2ErrorCode? ErrorCode { get; set; }
    
        /// <summary>Echo of the uniqueRequestId from the request.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueRequestId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("straightBet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public StraightBet StraightBet { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StraightBet 
    {
        /// <summary>Bet identification</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Always)]
        public long BetId { get; set; }
    
        /// <summary>Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.</summary>
        [Newtonsoft.Json.JsonProperty("wagerNumber", Required = Newtonsoft.Json.Required.Always)]
        public int WagerNumber { get; set; }
    
        /// <summary>Date time when the bet was placed.</summary>
        [Newtonsoft.Json.JsonProperty("placedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PlacedAt { get; set; }
    
        /// <summary>Bet Status.  
        /// 
        /// ACCEPTED = Bet was accepted,  
        /// CANCELLED = Bet is cancelled as per Pinnacle betting rules,  
        /// LOSE = The bet is settled as lose,  
        /// PENDING_ACCEPTANCE = This status is reserved only for live bets. If a live bet is placed during danger zone or live delay is applied, it will be in PENDING_ACCEPTANCE , otherwise in ACCEPTED status. From this status bet can go to ACCEPTED or NOT_ACCEPTED status,  
        /// REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status,  
        /// NOT_ACCEPTED = Bet was not accepted. Bet can be in this status only if it was previously in PENDING_ACCEPTANCE status,  
        /// WON = The bet is settled as won 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("betStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraightBetBetStatus BetStatus { get; set; }
    
        /// <summary>Bet type.</summary>
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraightBetBetType BetType { get; set; }
    
        /// <summary>Win amount.</summary>
        [Newtonsoft.Json.JsonProperty("win", Required = Newtonsoft.Json.Required.Always)]
        public double Win { get; set; }
    
        /// <summary>Risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("risk", Required = Newtonsoft.Json.Required.Always)]
        public double Risk { get; set; }
    
        /// <summary>Win-Loss for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("winLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WinLoss { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat OddsFormat { get; set; }
    
        /// <summary>Client’s commission on the bet.</summary>
        [Newtonsoft.Json.JsonProperty("customerCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomerCommission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cancellationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReason CancellationReason { get; set; }
    
        /// <summary>Update Sequence</summary>
        [Newtonsoft.Json.JsonProperty("updateSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? UpdateSequence { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("leagueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeagueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("handicap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Handicap { get; set; }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("teamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TeamName { get; set; }
    
        /// <summary>Side type.</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraightBetSide? Side { get; set; }
    
        /// <summary>Pitcher name of team1. Only for bets on baseball.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pitcher1 { get; set; }
    
        /// <summary>Pitcher name of team2. Only for bets on baseball.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pitcher2 { get; set; }
    
        /// <summary>Whether the team1 pitcher must start. Only for bets on baseball.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher1MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraightBetPitcher1MustStart? Pitcher1MustStart { get; set; }
    
        /// <summary>Whether the team1 pitcher must start. Only for bets on baseball.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher2MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraightBetPitcher2MustStart? Pitcher2MustStart { get; set; }
    
        [Newtonsoft.Json.JsonProperty("team1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("team2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodNumber { get; set; }
    
        /// <summary>Team 1 score that the bet was placed on, only for live bets.</summary>
        [Newtonsoft.Json.JsonProperty("team1Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Team1Score { get; set; }
    
        /// <summary>Team 2 score that the bet was placed, only for live bets.</summary>
        [Newtonsoft.Json.JsonProperty("team2Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Team2Score { get; set; }
    
        /// <summary>Full time team 1 score, only for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("ftTeam1Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FtTeam1Score { get; set; }
    
        /// <summary>Full time team 2 score, only for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("ftTeam2Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FtTeam2Score { get; set; }
    
        /// <summary>.End of period team 1 score, only for settled bets. If the bet was placed on Game period (periodNumber =0) , this will be null . </summary>
        [Newtonsoft.Json.JsonProperty("pTeam1Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PTeam1Score { get; set; }
    
        /// <summary>End of period team 2 score, only for settled bets. If the bet was placed on Game period (periodNumber =0) , this will be null</summary>
        [Newtonsoft.Json.JsonProperty("pTeam2Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PTeam2Score { get; set; }
    
        /// <summary>Whether the bet is on live event</summary>
        [Newtonsoft.Json.JsonProperty("isLive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraightBetIsLive? IsLive { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class StraightBetV3 
    {
        /// <summary>Bet identification</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BetId { get; set; }
    
        /// <summary>Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.</summary>
        [Newtonsoft.Json.JsonProperty("wagerNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? WagerNumber { get; set; }
    
        /// <summary>Date time when the bet was placed.</summary>
        [Newtonsoft.Json.JsonProperty("placedAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset? PlacedAt { get; set; }
    
        /// <summary>Date time when the bet was settled.</summary>
        [Newtonsoft.Json.JsonProperty("settledAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SettledAt { get; set; }
    
        /// <summary>Bet Status.  
        /// 
        /// ACCEPTED = Bet was accepted,  
        /// CANCELLED = Bet is cancelled as per Pinnacle betting rules,  
        /// LOSE = The bet is settled as lose,  
        /// PENDING_ACCEPTANCE = This status is reserved only for live bets. If a live bet is placed during danger zone or live delay is applied, it will be in PENDING_ACCEPTANCE , otherwise in ACCEPTED status. From this status bet can go to ACCEPTED or NOT_ACCEPTED status,  
        /// REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status,  
        /// NOT_ACCEPTED = Bet was not accepted. Bet can be in this status only if it was previously in PENDING_ACCEPTANCE status,  
        /// WON = The bet is settled as won,  
        /// REJECTED = Bet is rejected
        /// </summary>
        [Newtonsoft.Json.JsonProperty("betStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraightBetV3BetStatus BetStatus { get; set; }
    
        /// <summary>Bet type.</summary>
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraightBetV3BetType? BetType { get; set; }
    
        /// <summary>Win amount.</summary>
        [Newtonsoft.Json.JsonProperty("win", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Win { get; set; }
    
        /// <summary>Risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("risk", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Risk { get; set; }
    
        /// <summary>Win-Loss for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("winLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WinLoss { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat? OddsFormat { get; set; }
    
        /// <summary>Client’s commission on the bet.</summary>
        [Newtonsoft.Json.JsonProperty("customerCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomerCommission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cancellationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReason CancellationReason { get; set; }
    
        /// <summary>Update Sequence</summary>
        [Newtonsoft.Json.JsonProperty("updateSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? UpdateSequence { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("leagueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeagueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("handicap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Handicap { get; set; }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("teamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TeamName { get; set; }
    
        /// <summary>Side type.</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public StraightBetV3Side? Side { get; set; }
    
        /// <summary>Pitcher name of team1. Only for bets on baseball.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pitcher1 { get; set; }
    
        /// <summary>Pitcher name of team2. Only for bets on baseball.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pitcher2 { get; set; }
    
        /// <summary>Baseball only. Refers to the pitcher for Team1.  This applicable only for MONEYLINE bet type, for all other bet types this has to be TRUE.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher1MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher1MustStart { get; set; }
    
        /// <summary>Baseball only. Refers to the pitcher for Team2.  This applicable only for MONEYLINE bet type, for all other bet types this has to be TRUE.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher2MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher2MustStart { get; set; }
    
        [Newtonsoft.Json.JsonProperty("team1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("team2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodNumber { get; set; }
    
        /// <summary>Team 1 score that the bet was placed on, only for live bets.</summary>
        [Newtonsoft.Json.JsonProperty("team1Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Team1Score { get; set; }
    
        /// <summary>Team 2 score that the bet was placed, only for live bets.</summary>
        [Newtonsoft.Json.JsonProperty("team2Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Team2Score { get; set; }
    
        /// <summary>Full time team 1 score, only for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("ftTeam1Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FtTeam1Score { get; set; }
    
        /// <summary>Full time team 2 score, only for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("ftTeam2Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FtTeam2Score { get; set; }
    
        /// <summary>.End of period team 1 score, only for settled bets. If the bet was placed on Game period (periodNumber =0) , this will be null . </summary>
        [Newtonsoft.Json.JsonProperty("pTeam1Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PTeam1Score { get; set; }
    
        /// <summary>End of period team 2 score, only for settled bets. If the bet was placed on Game period (periodNumber =0) , this will be null</summary>
        [Newtonsoft.Json.JsonProperty("pTeam2Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PTeam2Score { get; set; }
    
        /// <summary>Whether the bet is on live event</summary>
        [Newtonsoft.Json.JsonProperty("isLive", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? IsLive { get; set; }
    
        /// <summary>Date time when the event starts.</summary>
        [Newtonsoft.Json.JsonProperty("eventStartTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EventStartTime { get; set; }
    
    
    }
    
    /// <summary>Possible keys \:  
    /// * correctTeam1Id
    /// * correctTeam2Id
    /// * correctListedPitcher1
    /// * correctListedPitcher2
    /// * correctSpread
    /// * correctTotalPoints
    /// * correctTeam1TotalPoints
    /// * correctTeam2TotalPoints
    /// * correctTeam1Score
    /// * correctTeam2Score
    /// * correctTeam1TennisSetsScore
    /// * correctTeam2TennisSetsScore
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CancellationReason 
    {
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("details", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationDetailsItem[] Details { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class CancellationDetailsItem 
    {
        [Newtonsoft.Json.JsonProperty("key", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Key { get; set; }
    
        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Value { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ErrorResponseWithErrorRef 
    {
        [Newtonsoft.Json.JsonProperty("ref", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ref { get; set; }
    
        [Newtonsoft.Json.JsonProperty("code", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Code { get; set; }
    
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
    
    }
    
    /// <summary>Request to place a bet</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PlaceParlayBetRequest 
    {
        /// <summary>This unique id of the place bet requests. This is to support idempotent requests.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId { get; set; }
    
        /// <summary>Whether or not to accept a bet when there is a line change in favor of the client.</summary>
        [Newtonsoft.Json.JsonProperty("acceptBetterLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AcceptBetterLine { get; set; }
    
        /// <summary>Amount in client’s currency. It is always risk amount when placing Parlay bets NOTE: If round robin options is used this amount will apply for all parlays so actual amount wagered will be riskAmount X number of Parlays.</summary>
        [Newtonsoft.Json.JsonProperty("riskAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RiskAmount { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat? OddsFormat { get; set; }
    
        /// <summary>Collection of parlay legs.</summary>
        [Newtonsoft.Json.JsonProperty("legs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ParlayLegRequest> Legs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("roundRobinOptions", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore, ItemConverterType = typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public System.Collections.Generic.ICollection<RoundRobinOptions> RoundRobinOptions { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParlayLegRequest 
    {
        /// <summary>Unique id of the leg. It's used to identify and match legs in the response.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueLegId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UniqueLegId { get; set; }
    
        /// <summary>Line identification.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId { get; set; }
    
        /// <summary>Alternate line identification.</summary>
        [Newtonsoft.Json.JsonProperty("altLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AltLineId { get; set; }
    
        /// <summary>Baseball only. Refers to the pitcher for Team1.  This applicable only for MONEYLINE bet type, for all other bet types this has to be TRUE.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher1MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher1MustStart { get; set; }
    
        /// <summary>Baseball only. Refers to the pitcher for Team2. This applicable only for MONEYLINE bet type, for all other bet types this has to be TRUE.</summary>
        [Newtonsoft.Json.JsonProperty("pitcher2MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher2MustStart { get; set; }
    
        /// <summary>Sport identification.</summary>
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId { get; set; }
    
        /// <summary>Event identification.</summary>
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId { get; set; }
    
        /// <summary>This represents the period of the match. For example, for soccer we have: 0 -  Game, 1 - 1st Half and 2 - 2nd Half</summary>
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodNumber { get; set; }
    
        /// <summary>Only SPREAD, MONEYLINE and TOTAL_POINTS are supported.</summary>
        [Newtonsoft.Json.JsonProperty("legBetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLegRequestLegBetType? LegBetType { get; set; }
    
        /// <summary>Chosen team type. This is needed only for SPREAD and MONEYLINE bet types.</summary>
        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team { get; set; }
    
        /// <summary>Chosen side type. This is needed only for TOTAL_POINTS bet type.</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLegRequestSide? Side { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PlaceParlayBetResponse 
    {
        /// <summary>Status of the response.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceParlayBetResponseStatus? Status { get; set; }
    
        /// <summary>When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.
        /// 
        /// 
        /// ABOVE_MAX_BET_AMOUNT = Stake is above allowed maximum amount,  
        /// ALL_BETTING_CLOSED = Betting is not allowed at this moment,  
        /// BELOW_MIN_BET_AMOUNT = Stake is below allowed minimum amount,  
        /// BLOCKED_BETTING = Betting is suspended for the client,   
        /// BLOCKED_CLIENT = Client is no longer active,  
        /// INSUFFICIENT_FUNDS = Bet is submitted by a client with insufficient funds,  
        /// INVALID_COUNTRY = Client country is not allowed for betting,  
        /// INVALID_LEGS = One or more legs are invalid,  
        /// INVALID_ODDS_FORMAT = If a bet was submitted with the odds format that is not allowed for the client,  
        /// INVALID_ROUND_ROBIN_OPTIONS = Round robin options are invalid (i.e. does not match with number of legs),  
        /// ROUND_ROBIN_DISALLOWED = Round robin is disallowed for one of the leagues,  
        /// TOO_MANY_LEGS = Maximum of 10 legs can be specified,  
        /// TOO_FEW_LEGS = At least 2 legs are required for Parlay,  
        /// RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Client has reached his total loss limit,  
        /// RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Client has reached his total risk limit,  
        /// INVALID_REQUEST = Request has invalid parameters,  
        /// DUPLICATE_UNIQUE_REQUEST_ID = Request with the same uniqueRequestId was already processed. Please set the new value if you still want the request to be processed,  
        /// SYSTEM_ERROR_3 = Unexpected error 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceParlayBetResponseErrorCode? ErrorCode { get; set; }
    
        /// <summary>Id of a newly created bet.</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BetId { get; set; }
    
        /// <summary>Unique identifier provided in the request.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId { get; set; }
    
        /// <summary>Provides array with all acceptable Round Robin options with parlay odds for that option.</summary>
        [Newtonsoft.Json.JsonProperty("roundRobinOptionWithOdds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RoundRobinOptionWithOdds> RoundRobinOptionWithOdds { get; set; }
    
        /// <summary>Maximum stake amount</summary>
        [Newtonsoft.Json.JsonProperty("maxRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxRiskStake { get; set; }
    
        /// <summary>Minimum stake amount</summary>
        [Newtonsoft.Json.JsonProperty("minRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinRiskStake { get; set; }
    
        /// <summary>Collection of valid legs (format described below). Can be empty if no valid legs found.</summary>
        [Newtonsoft.Json.JsonProperty("validLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ParlayLegResponse> ValidLegs { get; set; }
    
        /// <summary>The collection of legs that resulted in error (format described below). Can be empty if no invalid legs found.</summary>
        [Newtonsoft.Json.JsonProperty("invalidLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ParlayLegResponse> InvalidLegs { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PlaceParlayBetResponseV2 
    {
        /// <summary>Status of the response.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceParlayBetResponseV2Status? Status { get; set; }
    
        /// <summary>When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.
        /// 
        /// 
        /// ABOVE_MAX_BET_AMOUNT = Stake is above allowed maximum amount,  
        /// ALL_BETTING_CLOSED = Betting is not allowed at this moment,  
        /// BELOW_MIN_BET_AMOUNT = Stake is below allowed minimum amount,  
        /// BLOCKED_BETTING = Betting is suspended for the client,   
        /// BLOCKED_CLIENT = Client is no longer active,  
        /// INSUFFICIENT_FUNDS = Bet is submitted by a client with insufficient funds,  
        /// INVALID_COUNTRY = Client country is not allowed for betting,  
        /// INVALID_LEGS = One or more legs are invalid,  
        /// INVALID_ODDS_FORMAT = If a bet was submitted with the odds format that is not allowed for the client,  
        /// INVALID_ROUND_ROBIN_OPTIONS = Round robin options are invalid (i.e. does not match with number of legs),  
        /// ROUND_ROBIN_DISALLOWED = Round robin is disallowed for one of the leagues,  
        /// TOO_MANY_LEGS = Maximum of 10 legs can be specified,  
        /// TOO_FEW_LEGS = At least 2 legs are required for Parlay,  
        /// RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Client has reached his total loss limit,  
        /// RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Client has reached his total risk limit,  
        /// INVALID_REQUEST = Request has invalid parameters,  
        /// DUPLICATE_UNIQUE_REQUEST_ID = Request with the same uniqueRequestId was already processed. Please set the new value if you still want the request to be processed,  
        /// SYSTEM_ERROR_3 = Unexpected error 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceParlayBetResponseV2ErrorCode? ErrorCode { get; set; }
    
        /// <summary>Id of a newly created bet.</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BetId { get; set; }
    
        /// <summary>Unique identifier provided in the request.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId { get; set; }
    
        /// <summary>Provides array with all acceptable Round Robin options with parlay odds for that option.</summary>
        [Newtonsoft.Json.JsonProperty("roundRobinOptionWithOdds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<RoundRobinOptionWithOdds> RoundRobinOptionWithOdds { get; set; }
    
        /// <summary>Maximum stake amount</summary>
        [Newtonsoft.Json.JsonProperty("maxRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MaxRiskStake { get; set; }
    
        /// <summary>Minimum stake amount</summary>
        [Newtonsoft.Json.JsonProperty("minRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? MinRiskStake { get; set; }
    
        /// <summary>Collection of valid legs (format described below). Can be empty if no valid legs found.</summary>
        [Newtonsoft.Json.JsonProperty("validLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ParlayLegResponse> ValidLegs { get; set; }
    
        /// <summary>The collection of legs that resulted in error (format described below). Can be empty if no invalid legs found.</summary>
        [Newtonsoft.Json.JsonProperty("invalidLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ParlayLegResponse> InvalidLegs { get; set; }
    
        [Newtonsoft.Json.JsonProperty("parlayBet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public ParlayBet ParlayBet { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class RoundRobinOptionWithOdds 
    {
        [Newtonsoft.Json.JsonProperty("roundRobinOption", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public RoundRobinOptionWithOddsRoundRobinOption? RoundRobinOption { get; set; }
    
        /// <summary>Parlay odds for this option.</summary>
        [Newtonsoft.Json.JsonProperty("odds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Odds { get; set; }
    
        /// <summary>Unrounded parlay odds in decimal format to be used for calculations only</summary>
        [Newtonsoft.Json.JsonProperty("unroundedDecimalOdds", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? UnroundedDecimalOdds { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParlayLegResponse 
    {
        /// <summary>Status of the request.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLegResponseStatus? Status { get; set; }
    
        /// <summary>When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.
        /// 
        /// CANNOT_PARLAY_LIVE_GAME = The wager is placed on Live game,  
        /// CORRELATED = The leg is correlated with another one,  
        /// EVENT_NO_LONGER_AVAILABLE_FOR_BETTING = The event is no longer offered,  
        /// EVENT_NOT_OFFERED_FOR_PARLAY = The event is not offered for parlaying,  
        /// INVALID_EVENT = Live betting is not allowed at this moment,  
        /// INVALID_LEG_BET_TYPE = Leg bet type is not accepted for parlaying. Accepted values are SPREAD, MONEYLINE, TOTAL_POINTS,  
        /// INVALID_PARLAY_BET = The leg did not validated due to error on Parlay Bet. Check the error PlaceParlayBet response for error details,  
        /// LINE_CHANGED = Bet is submitted on a line that has changed,  
        /// LINE_DOES_NOT_BELONG_TO_EVENT = LineId does not match the EventId specified in the request,  
        /// LISTED_PITCHERS_SELECTION_ERROR = If bet was submitted with pitcher1MustStart and/or pitcher2MustStart parameters with values that are not allowed,  
        /// ODDS_NO_LONGER_OFFERED_FOR_PARLAY_1 = Due to line change odds are not offered for parlaying,   
        /// ODDS_NO_LONGER_OFFERED_FOR_PARLAY_2 = Due to line change odds are not offered for parlaying,   
        /// ODDS_NO_LONGER_OFFERED_FOR_PARLAY_3 = Due to line change odds are not offered for parlaying,   
        /// OFFLINE_EVENT = Bet is submitted on an event that is offline or with incorrect lineId,  
        /// PAST_CUTOFFTIME = Bet is submitted on a game after the betting cutoff time,   
        /// SYSTEM_ERROR_1 = Unexpected error,  
        /// SYSTEM_ERROR_2 = Unexpected error,  
        /// SYSTEM_ERROR_3 = Unexpected error,  
        /// LINE_IS_NOT_AVAILABLE = Line is not available for the specified Parlay Leg.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLegResponseErrorCode? ErrorCode { get; set; }
    
        /// <summary>Echo of the legId from the request.</summary>
        [Newtonsoft.Json.JsonProperty("legId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? LegId { get; set; }
    
        /// <summary>Line identification that bet was placed on.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId { get; set; }
    
        /// <summary>If bet was accpepted on alternate line, the altLineId will be returned.</summary>
        [Newtonsoft.Json.JsonProperty("altLineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? AltLineId { get; set; }
    
        /// <summary>Price that the bet was placed on.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }
    
        /// <summary>If errorCode is CORRELATED will contain legIds of all correlated legs.</summary>
        [Newtonsoft.Json.JsonProperty("correlatedLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<System.Guid> CorrelatedLegs { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParlayBet 
    {
        /// <summary>Bet identification</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Always)]
        public long BetId { get; set; }
    
        /// <summary>Unique Request Id</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId { get; set; }
    
        /// <summary>Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.</summary>
        [Newtonsoft.Json.JsonProperty("wagerNumber", Required = Newtonsoft.Json.Required.Always)]
        public int WagerNumber { get; set; }
    
        /// <summary>Date time when the bet was placed.</summary>
        [Newtonsoft.Json.JsonProperty("placedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PlacedAt { get; set; }
    
        /// <summary>Date time when the bet was settled.</summary>
        [Newtonsoft.Json.JsonProperty("settledAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SettledAt { get; set; }
    
        /// <summary>Bet Status. 
        /// 
        /// ACCEPTED = Bet was accepted,  
        /// CANCELLED = Bet is cancelled as per Pinnacle betting rules,  
        /// LOSE = The bet is settled as lose,  
        /// PENDING_ACCEPTANCE = This status is reserved only for live bets. If a live bet is placed during danger zone or live delay is applied, it will be in PENDING_ACCEPTANCE , otherwise in ACCEPTED status. From this status bet can go to ACCEPTED or REJECTED status,  
        /// REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status,  
        /// NOT_ACCEPTED = Bet was not accepted. Bet can be in this status only if it was previously in PENDING_ACCEPTANCE status,  
        /// WON = The bet is settled as won
        /// </summary>
        [Newtonsoft.Json.JsonProperty("betStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayBetBetStatus BetStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BetType { get; set; } = "PARLAY";
    
        /// <summary>Win amount.</summary>
        [Newtonsoft.Json.JsonProperty("win", Required = Newtonsoft.Json.Required.Always)]
        public double Win { get; set; }
    
        /// <summary>Risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("risk", Required = Newtonsoft.Json.Required.Always)]
        public double Risk { get; set; }
    
        /// <summary>Win-Loss for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("winLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WinLoss { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat OddsFormat { get; set; }
    
        /// <summary>Client’s commission on the bet.</summary>
        [Newtonsoft.Json.JsonProperty("customerCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomerCommission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cancellationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReason CancellationReason { get; set; }
    
        /// <summary>Update Sequence</summary>
        [Newtonsoft.Json.JsonProperty("updateSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? UpdateSequence { get; set; }
    
        [Newtonsoft.Json.JsonProperty("legs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<ParlayLeg> Legs { get; set; } = new System.Collections.ObjectModel.Collection<ParlayLeg>();
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }
    
        /// <summary>Only for settled parlay. Final price may differ in case leg was cancelled or half won</summary>
        [Newtonsoft.Json.JsonProperty("finalPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FinalPrice { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ParlayLeg 
    {
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId { get; set; }
    
        /// <summary>Parlay leg type.</summary>
        [Newtonsoft.Json.JsonProperty("legBetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLegLegBetType? LegBetType { get; set; }
    
        /// <summary>Parlay Leg status.
        /// CANCELLED = The leg is canceled- the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,  
        /// LOSE = The leg is a loss or a push-lose. When Push-lose happens, the half of the stake on the leg will be pushed to the next leg, and the other half will be a lose. This can happen only when the leg is placed on a quarter points handicap,  
        /// PUSH = The leg is a push - the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,  
        /// REFUNDED = The leg is refunded - the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,  
        /// WON = The leg is a won or a push-won. When Push-won happens, the half of the stake on the leg will be pushed to the next leg, and the other half is won. This can happen only when the leg is placed on a quarter points handicap 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legBetStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLegLegBetStatus? LegBetStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("leagueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeagueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eventStartTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EventStartTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("handicap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Handicap { get; set; }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("teamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TeamName { get; set; }
    
        /// <summary>Side type.</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ParlayLegSide? Side { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pitcher1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pitcher1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pitcher2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pitcher2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pitcher1MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher1MustStart { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pitcher2MustStart", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? Pitcher2MustStart { get; set; }
    
        /// <summary>Wellington Phoenix</summary>
        [Newtonsoft.Json.JsonProperty("team1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team1 { get; set; }
    
        /// <summary>Adelaide United</summary>
        [Newtonsoft.Json.JsonProperty("team2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodNumber { get; set; }
    
        /// <summary>Full time team 1 score</summary>
        [Newtonsoft.Json.JsonProperty("ftTeam1Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FtTeam1Score { get; set; }
    
        /// <summary>Full time team 2 score</summary>
        [Newtonsoft.Json.JsonProperty("ftTeam2Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FtTeam2Score { get; set; }
    
        /// <summary>End of period team 1 score. If the bet was placed on Game period (periodNumber =0) , this will be null</summary>
        [Newtonsoft.Json.JsonProperty("pTeam1Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PTeam1Score { get; set; }
    
        /// <summary>End of period team 2 score. If the bet was placed on Game period (periodNumber =0) , this will be null</summary>
        [Newtonsoft.Json.JsonProperty("pTeam2Score", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? PTeam2Score { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cancellationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReason CancellationReason { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PlaceTeaserBetRequest 
    {
        /// <summary>Client generated GUID for uniquely identifying the bet.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId { get; set; }
    
        /// <summary>Unique identifier. Teaser details can be retrieved from a call to Get Teaser Groups endpoint.</summary>
        [Newtonsoft.Json.JsonProperty("teaserId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? TeaserId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat? OddsFormat { get; set; }
    
        /// <summary>Whether the stake amount is risk or win amount.</summary>
        [Newtonsoft.Json.JsonProperty("winRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WinRiskStake { get; set; }
    
        /// <summary>amount in client’s currency.</summary>
        [Newtonsoft.Json.JsonProperty("stake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Stake { get; set; }
    
        /// <summary>Collection of legs.</summary>
        [Newtonsoft.Json.JsonProperty("legs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TeaserBetLeg> Legs { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TeaserBetLeg 
    {
        /// <summary>Client generated GUID for uniquely identifying the leg.</summary>
        [Newtonsoft.Json.JsonProperty("legId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string LegId { get; set; }
    
        /// <summary>Leg bet type can be SPREAD or TOTAL_POINTS </summary>
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserBetLegBetType? BetType { get; set; }
    
        /// <summary>Unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId { get; set; }
    
        /// <summary>Unique identifier.</summary>
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId { get; set; }
    
        /// <summary>Team being bet on for a spread line.</summary>
        [Newtonsoft.Json.JsonProperty("team", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team { get; set; }
    
        /// <summary>Chosen side type. This is needed only for TOTAL_POINTS bet type.</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserBetLegSide? Side { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PlaceTeaserBetResponse 
    {
        /// <summary>Status of the request.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.
        /// 
        /// ABOVE_MAX_BET_AMOUNT = Bet is above the maximum allowed,  
        /// ALL_BETTING_CLOSED = The wagering is disabled in the system (not related to a customer),  
        /// BELOW_MIN_BET_AMOUNT = Bet is below the minimum allowed,  
        /// BLOCKED_BETTING = Betting is suspended for the client,  
        /// BLOCKED_CLIENT = Customer is inactive in the system,  
        /// DOUBLE_HIT = The website submitted the same bet more than once,  
        /// DUPLICATE_CLIENT_REFERENCE_ID = The teaser unique id and/or one of the leg unique id are the same,  
        /// INCOMPLETE_CUSTOMER_BETTING_PROFILE = The customer does not exist,  
        /// INSUFFICIENT_FUNDS = The risk amount is above the customer’s available balance,  
        /// INVALID_COUNTRY = Current location is proscribed,  
        /// INVALID_CUSTOMER_PROFILE = Either the customer does not exist OR the customer business rules are not verified,  
        /// INVALID_LEGS = One or more legs are not verified,  
        /// INVALID_REQUEST = Teaser request is not valid,  
        /// ODDS_FORMAT_MISMATCH = Agent customer’s odds format differs from wager request odds format,  
        /// RESUBMIT_REQUEST = The ticket hast to be resubmitted,  
        /// TEASER_DOES_NOT_EXIST = Teaser does not exist in the system,  
        /// SAME_EVENT_ONLY_REQUIRED = Legs required to be for the same game only. Specified in the Teaser Specifications,  
        /// SYSTEM_ERROR_1 = System error,  
        /// SYSTEM_ERROR_2 = System error,  
        /// SYSTEM_ERROR_3 = System error,  
        /// TOO_FEW_LEGS = Legs count is below Min Picks specified in the Teaser Specifications,  
        /// TOO_MANY_LEGS = Legs count is above Max Picks specified in the Teaser Specifications,
        /// DUPLICATE_UNIQUE_REQUEST_ID = Request with the same uniqueRequestId was already processed. Please set the new value if you still want the request to be processed,  
        /// RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Client has reached his total loss limit,  
        /// RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Client has reached his total risk limit
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceTeaserBetResponseErrorCode? ErrorCode { get; set; }
    
        /// <summary>Id of a newly created bet.</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BetId { get; set; }
    
        /// <summary>Unique identifier provided in the request.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId { get; set; }
    
        /// <summary>Price for the bet.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }
    
        /// <summary>Amount wagered.</summary>
        [Newtonsoft.Json.JsonProperty("riskAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? RiskAmount { get; set; }
    
        /// <summary>Potential winnings.</summary>
        [Newtonsoft.Json.JsonProperty("winAmount", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WinAmount { get; set; }
    
        /// <summary>Whether the stake amount is risk or win amount.</summary>
        [Newtonsoft.Json.JsonProperty("winRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WinRiskStake { get; set; }
    
        /// <summary>A collection of invalid legs, if any.</summary>
        [Newtonsoft.Json.JsonProperty("invalidLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlaceTeaserBetLegResponse> InvalidLegs { get; set; }
    
        /// <summary>A collection of valid legs, if any.</summary>
        [Newtonsoft.Json.JsonProperty("validLegs", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<PlaceTeaserBetLegResponse> ValidLegs { get; set; }
    
        /// <summary>Present if bet was accepted</summary>
        [Newtonsoft.Json.JsonProperty("teaserBet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public TeaserBet TeaserBet { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class PlaceTeaserBetLegResponse 
    {
        /// <summary>Status of the request.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Status { get; set; }
    
        /// <summary>When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.
        /// 
        /// CANNOT_TEASER_LIVE_GAME = Teaser is not allowed on a live game,   
        /// CHECK_TEASER_ERROR = The teaser is invalid, check the teaser error for more details,  
        /// INVALID_EVENT = The game is not found in the system,  
        /// INVALID_LEG_BET = The wager is not verified,  
        /// INVALID_LEG_BET_TYPE = Wager type is not “teasable”, can be either Spread or Total,  
        /// LINE_CHANGED = Wager is placed on a line that has changed,  
        /// LINE_DOES_NOT_BELONG_TO_EVENT = There was no game found for the wager,  
        /// OFFLINE_EVENT = Either the game is offline OR there was no game found for the wager,  
        /// PAST_CUTOFFTIME = Wager is placed on a game after the cutoff time,  
        /// POINTS_ARE_NOT_ADJUSTED = The teaser points were not adjusted,  
        /// SYSTEM_ERROR_1 = System error,  
        /// SYSTEM_ERROR_2 = System error,  
        /// WAGER_DATA_MISSING = Wager is denied due to insufficient information available for validation,  
        /// LINE_IS_NOT_AVAILABLE = Line is not available for the specified Teaser Leg.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PlaceTeaserBetLegResponseErrorCode? ErrorCode { get; set; }
    
        /// <summary>Echo of the legId from the request.</summary>
        [Newtonsoft.Json.JsonProperty("legId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? LegId { get; set; }
    
        /// <summary>Line identification that bet was placed on.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId { get; set; }
    
        /// <summary>Number of points.</summary>
        [Newtonsoft.Json.JsonProperty("points", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Points { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MultiBetRequestOfSpecialBetRequest 
    {
        /// <summary>The individual bets.</summary>
        [Newtonsoft.Json.JsonProperty("bets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SpecialBetRequest> Bets { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SpecialBetRequest 
    {
        /// <summary>This unique id of the place bet requests. This is to support idempotent requests.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId { get; set; }
    
        /// <summary>Whether or not to accept a bet when there is a line change in favor of the client.</summary>
        [Newtonsoft.Json.JsonProperty("acceptBetterLine", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? AcceptBetterLine { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat? OddsFormat { get; set; }
    
        /// <summary>amount in client’s currency.</summary>
        [Newtonsoft.Json.JsonProperty("stake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Stake { get; set; }
    
        /// <summary>Whether the stake amount is risk or win amount.</summary>
        [Newtonsoft.Json.JsonProperty("winRiskStake", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SpecialBetRequestWinRiskStake? WinRiskStake { get; set; }
    
        /// <summary>Line identification.</summary>
        [Newtonsoft.Json.JsonProperty("lineId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? LineId { get; set; }
    
        /// <summary>Special identification.</summary>
        [Newtonsoft.Json.JsonProperty("specialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SpecialId { get; set; }
    
        /// <summary>Contestant identification.</summary>
        [Newtonsoft.Json.JsonProperty("contestantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ContestantId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class MultiBetResponseOfSpecialBetResponse 
    {
        /// <summary>The individual bets.</summary>
        [Newtonsoft.Json.JsonProperty("bets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SpecialBetResponse> Bets { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SpecialBetResponse 
    {
        /// <summary>Status of the request.</summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SpecialBetResponseStatus? Status { get; set; }
    
        /// <summary>When Status is PROCESSED_WITH_ERROR, provides a code indicating the specific problem.
        /// 
        /// ALL_BETTING_CLOSED = Betting is not allowed at this moment. This may happen during system maintenance.  
        ///  ABOVE_MAX_BET_AMOUNT = Stake is above allowed maximum amount,  
        ///  BELOW_MIN_BET_AMOUNT = Stake is below allowed minimum amount,  
        ///  BLOCKED_BETTING = Betting is suspened for the client,  
        ///  BLOCKED_CLIENT = Client is no longer active,  
        ///  CONTEST_NOT_FOUND = Incorrect contest id provided or contest is no longer available,  
        ///  DUPLICATE_UNIQUE_REQUEST_ID = UniqueRequestId must be inque for each bet,  
        ///  INCOMPLETE_CUSTOMER_BETTING_PROFILE = Customer profile could not be loaded,   
        ///  INSUFFICIENT_FUNDS = Bet is submitted by a client with insufficient funds,  
        ///  INVALID_COUNTRY = Client country is not allowed for betting,  
        ///  INVALID_REQUEST = Special bet request is not valid,  
        ///  LINE_CHANGED = Bet is submitted on a line that has changed,  
        ///  PAST_CUTOFFTIME = Bet is submitted on a game after the betting cutoff time,  
        ///  RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = Self-imposed loss limit exceeded,  
        ///  RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = Self-imposed risk limit exceeded,  
        ///  RESUBMIT_REQUEST = The ticket hast to be resubmitted,  
        ///  SYSTEM_ERROR_1 = Unexpected error,  
        ///  SYSTEM_ERROR_2 = Unexpected error,  
        ///  UNIQUE_REQUEST_ID_REQUIRED = UniqueRequestId is missing,  
        ///  INVALID_CUSTOMER_PROFILE
        /// </summary>
        [Newtonsoft.Json.JsonProperty("errorCode", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SpecialBetResponseErrorCode? ErrorCode { get; set; }
    
        /// <summary>Id of a newly created bet.</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? BetId { get; set; }
    
        /// <summary>Unique identifier provided in the request.</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId { get; set; }
    
        /// <summary>Whether or not the bet was accepted on the line that changed in favour of client. This can be true only if acceptBetterLine in the Place Bet request is set to TRUE.</summary>
        [Newtonsoft.Json.JsonProperty("betterLineWasAccepted", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? BetterLineWasAccepted { get; set; }
    
        [Newtonsoft.Json.JsonProperty("specialBet", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SpecialBet SpecialBet { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SpecialBet 
    {
        /// <summary>Bet identification</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Always)]
        public long BetId { get; set; }
    
        /// <summary>Unique Request Id</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId { get; set; }
    
        /// <summary>Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.</summary>
        [Newtonsoft.Json.JsonProperty("wagerNumber", Required = Newtonsoft.Json.Required.Always)]
        public int WagerNumber { get; set; }
    
        /// <summary>Date time when the bet was placed.</summary>
        [Newtonsoft.Json.JsonProperty("placedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PlacedAt { get; set; }
    
        /// <summary>Date time when the bet was settled.</summary>
        [Newtonsoft.Json.JsonProperty("settledAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SettledAt { get; set; }
    
        /// <summary>Bet Status. 
        /// ACCEPTED = Bet was accepted, 
        /// CANCELLED = Bet is cancelled as per Pinnacle betting rules, 
        /// LOSE = The bet is settled as lose,
        /// REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status, 
        /// WON = The bet is settled as won 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("betStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SpecialBetBetStatus BetStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BetType { get; set; } = "SPECIAL";
    
        /// <summary>Win amount.</summary>
        [Newtonsoft.Json.JsonProperty("win", Required = Newtonsoft.Json.Required.Always)]
        public double Win { get; set; }
    
        /// <summary>Risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("risk", Required = Newtonsoft.Json.Required.Always)]
        public double Risk { get; set; }
    
        /// <summary>Win-Loss for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("winLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WinLoss { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat OddsFormat { get; set; }
    
        /// <summary>Client’s commission on the bet.</summary>
        [Newtonsoft.Json.JsonProperty("customerCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomerCommission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cancellationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReason CancellationReason { get; set; }
    
        /// <summary>Update Sequence. It gets updated when the bet status change.</summary>
        [Newtonsoft.Json.JsonProperty("updateSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? UpdateSequence { get; set; }
    
        [Newtonsoft.Json.JsonProperty("specialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SpecialId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("specialName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SpecialName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contestantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ContestantId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contestantName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContestantName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public double Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("handicap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Handicap { get; set; }
    
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Always)]
        public int SportId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("leagueId", Required = Newtonsoft.Json.Required.Always)]
        public int LeagueId { get; set; }
    
        /// <summary>Populated if bet was placed on a special linked to the event.</summary>
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId { get; set; }
    
        /// <summary>Populated if bet was placed on a special linked to the event.</summary>
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodNumber { get; set; }
    
        /// <summary>Populated if bet was placed on a special linked to the event.</summary>
        [Newtonsoft.Json.JsonProperty("team1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team1 { get; set; }
    
        /// <summary>Populated if bet was placed on a special linked to the event.</summary>
        [Newtonsoft.Json.JsonProperty("team2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team2 { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SpecialBetV3 
    {
        /// <summary>Bet identification</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Always)]
        public long BetId { get; set; }
    
        /// <summary>Unique Request Id</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId { get; set; }
    
        /// <summary>Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.</summary>
        [Newtonsoft.Json.JsonProperty("wagerNumber", Required = Newtonsoft.Json.Required.Always)]
        public int WagerNumber { get; set; }
    
        /// <summary>Date time when the bet was placed.</summary>
        [Newtonsoft.Json.JsonProperty("placedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PlacedAt { get; set; }
    
        /// <summary>Date time when the bet was settled.</summary>
        [Newtonsoft.Json.JsonProperty("settledAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SettledAt { get; set; }
    
        /// <summary>Bet Status. 
        /// ACCEPTED = Bet was accepted, 
        /// CANCELLED = Bet is cancelled as per Pinnacle betting rules, 
        /// LOSE = The bet is settled as lose,
        /// REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status, 
        /// WON = The bet is settled as won 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("betStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SpecialBetV3BetStatus BetStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BetType { get; set; } = "SPECIAL";
    
        /// <summary>Win amount.</summary>
        [Newtonsoft.Json.JsonProperty("win", Required = Newtonsoft.Json.Required.Always)]
        public double Win { get; set; }
    
        /// <summary>Risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("risk", Required = Newtonsoft.Json.Required.Always)]
        public double Risk { get; set; }
    
        /// <summary>Win-Loss for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("winLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WinLoss { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat OddsFormat { get; set; }
    
        /// <summary>Client’s commission on the bet.</summary>
        [Newtonsoft.Json.JsonProperty("customerCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomerCommission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cancellationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReason CancellationReason { get; set; }
    
        /// <summary>Update Sequence. It gets updated when the bet status change.</summary>
        [Newtonsoft.Json.JsonProperty("updateSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? UpdateSequence { get; set; }
    
        [Newtonsoft.Json.JsonProperty("specialId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? SpecialId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("specialName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string SpecialName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contestantId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ContestantId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("contestantName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string ContestantName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Always)]
        public double Price { get; set; }
    
        [Newtonsoft.Json.JsonProperty("handicap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Handicap { get; set; }
    
        [Newtonsoft.Json.JsonProperty("units", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Units { get; set; }
    
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Always)]
        public int SportId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("leagueId", Required = Newtonsoft.Json.Required.Always)]
        public int LeagueId { get; set; }
    
        /// <summary>Populated if bet was placed on a special linked to the event.</summary>
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId { get; set; }
    
        /// <summary>Populated if bet was placed on a special linked to the event.</summary>
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodNumber { get; set; }
    
        /// <summary>Populated if bet was placed on a special linked to the event.</summary>
        [Newtonsoft.Json.JsonProperty("team1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team1 { get; set; }
    
        /// <summary>Populated if bet was placed on a special linked to the event.</summary>
        [Newtonsoft.Json.JsonProperty("team2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team2 { get; set; }
    
        /// <summary>Date time when the event starts.</summary>
        [Newtonsoft.Json.JsonProperty("eventStartTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? EventStartTime { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetBetsByTypeResponse 
    {
        /// <summary>A collection of placed straight bets.</summary>
        [Newtonsoft.Json.JsonProperty("straightBets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StraightBet> StraightBets { get; set; }
    
        /// <summary>A collection of placed parlay bets.</summary>
        [Newtonsoft.Json.JsonProperty("parlayBets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ParlayBet> ParlayBets { get; set; }
    
        /// <summary>A collection of placed teaser bets.</summary>
        [Newtonsoft.Json.JsonProperty("teaserBets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TeaserBet> TeaserBets { get; set; }
    
        /// <summary>A collection of placed special bets.</summary>
        [Newtonsoft.Json.JsonProperty("specialBets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SpecialBet> SpecialBets { get; set; }
    
        /// <summary>A collection of placed manual bets.</summary>
        [Newtonsoft.Json.JsonProperty("manualBets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ManualBet> ManualBets { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetBetsByTypeResponseV3 
    {
        /// <summary>Whether there are more pages available.</summary>
        [Newtonsoft.Json.JsonProperty("moreAvailable", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool? MoreAvailable { get; set; }
    
        /// <summary>Page size. Default is 1000.</summary>
        [Newtonsoft.Json.JsonProperty("pageSize", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PageSize { get; set; }
    
        /// <summary>Starting record number of the result set. Records start at zero</summary>
        [Newtonsoft.Json.JsonProperty("fromRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? FromRecord { get; set; }
    
        /// <summary>Ending record number of the result set.</summary>
        [Newtonsoft.Json.JsonProperty("toRecord", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? ToRecord { get; set; }
    
        /// <summary>A collection of placed straight bets.</summary>
        [Newtonsoft.Json.JsonProperty("straightBets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<StraightBetV3> StraightBets { get; set; }
    
        /// <summary>A collection of placed parlay bets.</summary>
        [Newtonsoft.Json.JsonProperty("parlayBets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ParlayBet> ParlayBets { get; set; }
    
        /// <summary>A collection of placed teaser bets.</summary>
        [Newtonsoft.Json.JsonProperty("teaserBets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<TeaserBet> TeaserBets { get; set; }
    
        /// <summary>A collection of placed special bets.</summary>
        [Newtonsoft.Json.JsonProperty("specialBets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SpecialBetV3> SpecialBets { get; set; }
    
        /// <summary>A collection of placed manual bets.</summary>
        [Newtonsoft.Json.JsonProperty("manualBets", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<ManualBet> ManualBets { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TeaserBet 
    {
        /// <summary>Bet identification</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Always)]
        public long BetId { get; set; }
    
        /// <summary>Unique Request Id</summary>
        [Newtonsoft.Json.JsonProperty("uniqueRequestId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Guid? UniqueRequestId { get; set; }
    
        /// <summary>Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.</summary>
        [Newtonsoft.Json.JsonProperty("wagerNumber", Required = Newtonsoft.Json.Required.Always)]
        public int WagerNumber { get; set; }
    
        /// <summary>Date time when the bet was placed.</summary>
        [Newtonsoft.Json.JsonProperty("placedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PlacedAt { get; set; }
    
        /// <summary>Date time when the bet was settled.</summary>
        [Newtonsoft.Json.JsonProperty("settledAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SettledAt { get; set; }
    
        /// <summary>Bet Status. 
        /// 
        /// ACCEPTED = Bet was accepted,  
        /// CANCELLED = Bet is cancelled as per Pinnacle betting rules,  
        /// LOSE = The bet is settled as lose,  
        /// REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status,  
        /// WON = The bet is settled as won 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("betStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserBetBetStatus BetStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BetType { get; set; } = "TEASER";
    
        /// <summary>Win amount.</summary>
        [Newtonsoft.Json.JsonProperty("win", Required = Newtonsoft.Json.Required.Always)]
        public double Win { get; set; }
    
        /// <summary>Risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("risk", Required = Newtonsoft.Json.Required.Always)]
        public double Risk { get; set; }
    
        /// <summary>Win-Loss for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("winLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WinLoss { get; set; }
    
        [Newtonsoft.Json.JsonProperty("oddsFormat", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public OddsFormat OddsFormat { get; set; }
    
        /// <summary>Client’s commission on the bet.</summary>
        [Newtonsoft.Json.JsonProperty("customerCommission", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? CustomerCommission { get; set; }
    
        [Newtonsoft.Json.JsonProperty("cancellationReason", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public CancellationReason CancellationReason { get; set; }
    
        /// <summary>Update Sequence</summary>
        [Newtonsoft.Json.JsonProperty("updateSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? UpdateSequence { get; set; }
    
        [Newtonsoft.Json.JsonProperty("teaserName", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string TeaserName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("isSameEventOnly", Required = Newtonsoft.Json.Required.Always)]
        public bool IsSameEventOnly { get; set; }
    
        [Newtonsoft.Json.JsonProperty("minPicks", Required = Newtonsoft.Json.Required.Always)]
        public double MinPicks { get; set; }
    
        [Newtonsoft.Json.JsonProperty("maxPicks", Required = Newtonsoft.Json.Required.Always)]
        public double MaxPicks { get; set; }
    
        /// <summary>Populated for all teaser bets and will be the original price at the time of the placement.</summary>
        [Newtonsoft.Json.JsonProperty("price", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Price { get; set; }
    
        /// <summary>Only for settled parlay. Final price may differ in case leg was cancelled or half won.</summary>
        [Newtonsoft.Json.JsonProperty("finalPrice", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? FinalPrice { get; set; }
    
        [Newtonsoft.Json.JsonProperty("legs", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<TeaserLeg> Legs { get; set; } = new System.Collections.ObjectModel.Collection<TeaserLeg>();
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class ManualBet 
    {
        /// <summary>Bet identification</summary>
        [Newtonsoft.Json.JsonProperty("betId", Required = Newtonsoft.Json.Required.Always)]
        public long BetId { get; set; }
    
        /// <summary>Wager identification. All bets placed thru the API will have value 1. Website Classic view supports multiple contest(special) bets placement in the same bet slip in that case the bet would have appropriate wager number, as well as all round robin parlay bets.</summary>
        [Newtonsoft.Json.JsonProperty("wagerNumber", Required = Newtonsoft.Json.Required.Always)]
        public int WagerNumber { get; set; }
    
        /// <summary>Date time when the bet was placed.</summary>
        [Newtonsoft.Json.JsonProperty("placedAt", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public System.DateTimeOffset PlacedAt { get; set; }
    
        /// <summary>Date time when the bet was settled.</summary>
        [Newtonsoft.Json.JsonProperty("settledAt", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset? SettledAt { get; set; }
    
        /// <summary>Bet Status. 
        /// 
        /// ACCEPTED = Bet was accepted,  
        /// CANCELLED = Bet is cancelled as per Pinnacle betting rules,  
        /// LOSE = The bet is settled as lose,  
        /// REFUNDED = When an event is cancelled or when the bet is settled as push, the bet will have REFUNDED status,  
        /// WON = The bet is settled as won 
        /// </summary>
        [Newtonsoft.Json.JsonProperty("betStatus", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ManualBetBetStatus BetStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("betType", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string BetType { get; set; } = "MANUAL";
    
        /// <summary>Win amount.</summary>
        [Newtonsoft.Json.JsonProperty("win", Required = Newtonsoft.Json.Required.Always)]
        public double Win { get; set; }
    
        /// <summary>Risk amount.</summary>
        [Newtonsoft.Json.JsonProperty("risk", Required = Newtonsoft.Json.Required.Always)]
        public double Risk { get; set; }
    
        /// <summary>Win-Loss for settled bets.</summary>
        [Newtonsoft.Json.JsonProperty("winLoss", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? WinLoss { get; set; }
    
        /// <summary>Update Sequence</summary>
        [Newtonsoft.Json.JsonProperty("updateSequence", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? UpdateSequence { get; set; }
    
        /// <summary>Manual bet description.</summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Description { get; set; }
    
        /// <summary>Referenced original bet id.</summary>
        [Newtonsoft.Json.JsonProperty("referenceBetId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? ReferenceBetId { get; set; }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class TeaserLeg 
    {
        [Newtonsoft.Json.JsonProperty("sportId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? SportId { get; set; }
    
        /// <summary>Teaser leg type.</summary>
        [Newtonsoft.Json.JsonProperty("legBetType", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserLegLegBetType? LegBetType { get; set; }
    
        /// <summary>CANCELLED = The leg is canceled- the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,  
        /// LOSE = The leg is a loss or a push-lose. When Push-lose happens, the half of the stake on the leg will be pushed to the next leg, and the other half will be a lose. This can happen only when the leg is placed on a quarter points handicap,  
        /// PUSH = The leg is a push - the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,  
        /// REFUNDED = The leg is refunded - the stake on this leg will be transferred to the next one. In this case the leg will be ignored when calculating the winLoss,  
        /// WON = The leg is a won or a push-won. When Push-won happens, the half of the stake on the leg will be pushed to the next leg, and the other half is won. This can happen only when the leg is placed on a quarter points handicap  
        /// </summary>
        [Newtonsoft.Json.JsonProperty("legBetStatus", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserLegLegBetStatus? LegBetStatus { get; set; }
    
        [Newtonsoft.Json.JsonProperty("leagueId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? LeagueId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eventId", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public long? EventId { get; set; }
    
        [Newtonsoft.Json.JsonProperty("eventStartTime", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string EventStartTime { get; set; }
    
        [Newtonsoft.Json.JsonProperty("handicap", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double? Handicap { get; set; }
    
        [Newtonsoft.Json.JsonProperty("teamName", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TeamName { get; set; }
    
        /// <summary>Side type.</summary>
        [Newtonsoft.Json.JsonProperty("side", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TeaserLegSide? Side { get; set; }
    
        [Newtonsoft.Json.JsonProperty("team1", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team1 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("team2", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Team2 { get; set; }
    
        [Newtonsoft.Json.JsonProperty("periodNumber", Required = Newtonsoft.Json.Required.Default, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int? PeriodNumber { get; set; }
    
    
    }
    
    /// <summary>Bet odds format.  
    /// AMERICAN = American odds format,  
    /// DECIMAL = Decimal (European) odds format,  
    /// HONGKONG = Hong Kong odds format,  
    /// INDONESIAN = Indonesian odds format,  
    /// MALAY = Malaysian odds format 
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum OddsFormat
    {
        [System.Runtime.Serialization.EnumMember(Value = @"AMERICAN")]
        AMERICAN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DECIMAL")]
        DECIMAL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HONGKONG")]
        HONGKONG = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INDONESIAN")]
        INDONESIAN = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MALAY")]
        MALAY = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class BettingStatusResponse 
    {
        /// <summary>Betting status.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public BettingStatusResponseStatus Status { get; set; }
    
    
    }
    
    /// <summary>Type of bet list to return. Not needed when betids is submitted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Betlist
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SETTLED")]
        SETTLED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
        RUNNING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 2,
    
    }
    
    /// <summary>Type of bet list to return. Not needed when betids is submitted.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Betlist2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SETTLED")]
        SETTLED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RUNNING")]
        RUNNING = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ALL")]
        ALL = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum Anonymous
    {
        [System.Runtime.Serialization.EnumMember(Value = @"WON")]
        WON = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOSE")]
        LOSE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUNDED")]
        REFUNDED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_ACCEPTED")]
        NOT_ACCEPTED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_ACCEPTANCE")]
        PENDING_ACCEPTANCE = 6,
    
    }
    
    /// <summary>Sort direction by postedAt/settledAt. Respected only when querying by date range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortDir
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,
    
    }
    
    /// <summary>Sort direction by postedAt/settledAt. Respected only when querying by date range.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SortDir2
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ASC")]
        ASC = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DESC")]
        DESC = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceBetRequestWinRiskStake
    {
        [System.Runtime.Serialization.EnumMember(Value = @"WIN")]
        WIN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RISK")]
        RISK = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceBetRequestBetType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MONEYLINE")]
        MONEYLINE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_TOTAL_POINTS")]
        TEAM_TOTAL_POINTS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPREAD")]
        SPREAD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_POINTS")]
        TOTAL_POINTS = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceBetRequestTeam
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TEAM1")]
        TEAM1 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TEAM2")]
        TEAM2 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DRAW")]
        DRAW = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceBetRequestSide
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNDER")]
        UNDER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceBetRequestV2WinRiskStake
    {
        [System.Runtime.Serialization.EnumMember(Value = @"WIN")]
        WIN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RISK")]
        RISK = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceBetRequestV2FillType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"NORMAL")]
        NORMAL = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FILLANDKILL")]
        FILLANDKILL = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FILLMAXLIMIT")]
        FILLMAXLIMIT = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceBetRequestV2BetType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MONEYLINE")]
        MONEYLINE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_TOTAL_POINTS")]
        TEAM_TOTAL_POINTS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPREAD")]
        SPREAD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_POINTS")]
        TOTAL_POINTS = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceBetRequestV2Team
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TEAM1")]
        TEAM1 = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TEAM2")]
        TEAM2 = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DRAW")]
        DRAW = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceBetRequestV2Side
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNDER")]
        UNDER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceBetResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_ACCEPTANCE")]
        PENDING_ACCEPTANCE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSED_WITH_ERROR")]
        PROCESSED_WITH_ERROR = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceBetResponseErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ALL_BETTING_CLOSED")]
        ALL_BETTING_CLOSED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ALL_LIVE_BETTING_CLOSED")]
        ALL_LIVE_BETTING_CLOSED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ABOVE_EVENT_MAX")]
        ABOVE_EVENT_MAX = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ABOVE_MAX_BET_AMOUNT")]
        ABOVE_MAX_BET_AMOUNT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BELOW_MIN_BET_AMOUNT")]
        BELOW_MIN_BET_AMOUNT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED_BETTING")]
        BLOCKED_BETTING = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED_CLIENT")]
        BLOCKED_CLIENT = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INSUFFICIENT_FUNDS")]
        INSUFFICIENT_FUNDS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_COUNTRY")]
        INVALID_COUNTRY = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_EVENT")]
        INVALID_EVENT = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ODDS_FORMAT")]
        INVALID_ODDS_FORMAT = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LINE_CHANGED")]
        LINE_CHANGED = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LISTED_PITCHERS_SELECTION_ERROR")]
        LISTED_PITCHERS_SELECTION_ERROR = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFFLINE_EVENT")]
        OFFLINE_EVENT = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PAST_CUTOFFTIME")]
        PAST_CUTOFFTIME = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RED_CARDS_CHANGED")]
        RED_CARDS_CHANGED = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SCORE_CHANGED")]
        SCORE_CHANGED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DUPLICATE_UNIQUE_REQUEST_ID")]
        DUPLICATE_UNIQUE_REQUEST_ID = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INCOMPLETE_CUSTOMER_BETTING_PROFILE")]
        INCOMPLETE_CUSTOMER_BETTING_PROFILE = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CUSTOMER_PROFILE")]
        INVALID_CUSTOMER_PROFILE = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LIMITS_CONFIGURATION_ISSUE")]
        LIMITS_CONFIGURATION_ISSUE = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESUBMIT_REQUEST")]
        RESUBMIT_REQUEST = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ERROR_3")]
        SYSTEM_ERROR_3 = 24,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ErrorResponseCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_REQUEST_DATA")]
        INVALID_REQUEST_DATA = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SELF_EXCLUSION")]
        SELF_EXCLUSION = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TERMS_AND_CONDITIONS_NOT_ACCEPTED")]
        TERMS_AND_CONDITIONS_NOT_ACCEPTED = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CREDENTIALS")]
        INVALID_CREDENTIALS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_AUTHORIZATION_HEADER")]
        INVALID_AUTHORIZATION_HEADER = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCOUNT_INACTIVE")]
        ACCOUNT_INACTIVE = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NO_API_ACCESS")]
        NO_API_ACCESS = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNAUTHORIZED ACCESS")]
        UNAUTHORIZED_ACCESS = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceBetResponseV2Status
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_ACCEPTANCE")]
        PENDING_ACCEPTANCE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSED_WITH_ERROR")]
        PROCESSED_WITH_ERROR = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceBetResponseV2ErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ALL_BETTING_CLOSED")]
        ALL_BETTING_CLOSED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ALL_LIVE_BETTING_CLOSED")]
        ALL_LIVE_BETTING_CLOSED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ABOVE_EVENT_MAX")]
        ABOVE_EVENT_MAX = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ABOVE_MAX_BET_AMOUNT")]
        ABOVE_MAX_BET_AMOUNT = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BELOW_MIN_BET_AMOUNT")]
        BELOW_MIN_BET_AMOUNT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED_BETTING")]
        BLOCKED_BETTING = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED_CLIENT")]
        BLOCKED_CLIENT = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INSUFFICIENT_FUNDS")]
        INSUFFICIENT_FUNDS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_COUNTRY")]
        INVALID_COUNTRY = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_EVENT")]
        INVALID_EVENT = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ODDS_FORMAT")]
        INVALID_ODDS_FORMAT = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LINE_CHANGED")]
        LINE_CHANGED = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LISTED_PITCHERS_SELECTION_ERROR")]
        LISTED_PITCHERS_SELECTION_ERROR = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFFLINE_EVENT")]
        OFFLINE_EVENT = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PAST_CUTOFFTIME")]
        PAST_CUTOFFTIME = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RED_CARDS_CHANGED")]
        RED_CARDS_CHANGED = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SCORE_CHANGED")]
        SCORE_CHANGED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DUPLICATE_UNIQUE_REQUEST_ID")]
        DUPLICATE_UNIQUE_REQUEST_ID = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INCOMPLETE_CUSTOMER_BETTING_PROFILE")]
        INCOMPLETE_CUSTOMER_BETTING_PROFILE = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CUSTOMER_PROFILE")]
        INVALID_CUSTOMER_PROFILE = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LIMITS_CONFIGURATION_ISSUE")]
        LIMITS_CONFIGURATION_ISSUE = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESUBMIT_REQUEST")]
        RESUBMIT_REQUEST = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ERROR_3")]
        SYSTEM_ERROR_3 = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LICENCE_RESTRICTION_LIVE_BETTING_BLOCKED")]
        LICENCE_RESTRICTION_LIVE_BETTING_BLOCKED = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_HANDICAP")]
        INVALID_HANDICAP = 26,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StraightBetBetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOSE")]
        LOSE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_ACCEPTANCE")]
        PENDING_ACCEPTANCE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUNDED")]
        REFUNDED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_ACCEPTED")]
        NOT_ACCEPTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WON")]
        WON = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StraightBetBetType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MONEYLINE")]
        MONEYLINE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_TOTAL_POINTS")]
        TEAM_TOTAL_POINTS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPREAD")]
        SPREAD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_POINTS")]
        TOTAL_POINTS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPECIAL")]
        SPECIAL = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PARLAY")]
        PARLAY = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TEASER")]
        TEASER = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
        MANUAL = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StraightBetSide
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNDER")]
        UNDER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StraightBetPitcher1MustStart
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TRUE")]
        TRUE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FALSE")]
        FALSE = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StraightBetPitcher2MustStart
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TRUE")]
        TRUE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FALSE")]
        FALSE = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StraightBetIsLive
    {
        [System.Runtime.Serialization.EnumMember(Value = @"TRUE")]
        TRUE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FALSE")]
        FALSE = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StraightBetV3BetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOSE")]
        LOSE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_ACCEPTANCE")]
        PENDING_ACCEPTANCE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUNDED")]
        REFUNDED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_ACCEPTED")]
        NOT_ACCEPTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WON")]
        WON = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REJECTED")]
        REJECTED = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StraightBetV3BetType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MONEYLINE")]
        MONEYLINE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_TOTAL_POINTS")]
        TEAM_TOTAL_POINTS = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPREAD")]
        SPREAD = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_POINTS")]
        TOTAL_POINTS = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPECIAL")]
        SPECIAL = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PARLAY")]
        PARLAY = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TEASER")]
        TEASER = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MANUAL")]
        MANUAL = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum StraightBetV3Side
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNDER")]
        UNDER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RoundRobinOptions
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Parlay")]
        Parlay = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TwoLegRoundRobin")]
        TwoLegRoundRobin = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ThreeLegRoundRobin")]
        ThreeLegRoundRobin = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FourLegRoundRobin")]
        FourLegRoundRobin = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FiveLegRoundRobin")]
        FiveLegRoundRobin = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SixLegRoundRobin")]
        SixLegRoundRobin = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SevenLegRoundRobin")]
        SevenLegRoundRobin = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EightLegRoundRobin")]
        EightLegRoundRobin = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ParlayLegRequestLegBetType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MONEYLINE")]
        MONEYLINE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPREAD")]
        SPREAD = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_POINTS")]
        TOTAL_POINTS = 2,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ParlayLegRequestSide
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNDER")]
        UNDER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceParlayBetResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSED_WITH_ERROR")]
        PROCESSED_WITH_ERROR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceParlayBetResponseErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ABOVE_MAX_BET_AMOUNT")]
        ABOVE_MAX_BET_AMOUNT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ALL_BETTING_CLOSED")]
        ALL_BETTING_CLOSED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BELOW_MIN_BET_AMOUNT")]
        BELOW_MIN_BET_AMOUNT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED_BETTING")]
        BLOCKED_BETTING = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED_CLIENT")]
        BLOCKED_CLIENT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INSUFFICIENT_FUNDS")]
        INSUFFICIENT_FUNDS = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_COUNTRY")]
        INVALID_COUNTRY = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_LEGS")]
        INVALID_LEGS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ODDS_FORMAT")]
        INVALID_ODDS_FORMAT = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ROUND_ROBIN_OPTIONS")]
        INVALID_ROUND_ROBIN_OPTIONS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ROUND_ROBIN_DISALLOWED")]
        ROUND_ROBIN_DISALLOWED = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_LEGS")]
        TOO_MANY_LEGS = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOO_FEW_LEGS")]
        TOO_FEW_LEGS = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_REQUEST")]
        INVALID_REQUEST = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DUPLICATE_UNIQUE_REQUEST_ID")]
        DUPLICATE_UNIQUE_REQUEST_ID = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ERROR_3")]
        SYSTEM_ERROR_3 = 17,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceParlayBetResponseV2Status
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSED_WITH_ERROR")]
        PROCESSED_WITH_ERROR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceParlayBetResponseV2ErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ABOVE_MAX_BET_AMOUNT")]
        ABOVE_MAX_BET_AMOUNT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ALL_BETTING_CLOSED")]
        ALL_BETTING_CLOSED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BELOW_MIN_BET_AMOUNT")]
        BELOW_MIN_BET_AMOUNT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED_BETTING")]
        BLOCKED_BETTING = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED_CLIENT")]
        BLOCKED_CLIENT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INSUFFICIENT_FUNDS")]
        INSUFFICIENT_FUNDS = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_COUNTRY")]
        INVALID_COUNTRY = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_LEGS")]
        INVALID_LEGS = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ODDS_FORMAT")]
        INVALID_ODDS_FORMAT = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_ROUND_ROBIN_OPTIONS")]
        INVALID_ROUND_ROBIN_OPTIONS = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ROUND_ROBIN_DISALLOWED")]
        ROUND_ROBIN_DISALLOWED = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_LEGS")]
        TOO_MANY_LEGS = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOO_FEW_LEGS")]
        TOO_FEW_LEGS = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_REQUEST")]
        INVALID_REQUEST = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DUPLICATE_UNIQUE_REQUEST_ID")]
        DUPLICATE_UNIQUE_REQUEST_ID = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ERROR_3")]
        SYSTEM_ERROR_3 = 17,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum RoundRobinOptionWithOddsRoundRobinOption
    {
        [System.Runtime.Serialization.EnumMember(Value = @"Parlay")]
        Parlay = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TwoLegRoundRobin")]
        TwoLegRoundRobin = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ThreeLegRoundRobin")]
        ThreeLegRoundRobin = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FourLegRoundRobin")]
        FourLegRoundRobin = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"FiveLegRoundRobin")]
        FiveLegRoundRobin = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SixLegRoundRobin")]
        SixLegRoundRobin = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SevenLegRoundRobin")]
        SevenLegRoundRobin = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EightLegRoundRobin")]
        EightLegRoundRobin = 7,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ParlayLegResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSED_WITH_ERROR")]
        PROCESSED_WITH_ERROR = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VALID")]
        VALID = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ParlayLegResponseErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CANNOT_PARLAY_LIVE_GAME")]
        CANNOT_PARLAY_LIVE_GAME = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CORRELATED")]
        CORRELATED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_NO_LONGER_AVAILABLE_FOR_BETTING")]
        EVENT_NO_LONGER_AVAILABLE_FOR_BETTING = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"EVENT_NOT_OFFERED_FOR_PARLAY")]
        EVENT_NOT_OFFERED_FOR_PARLAY = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_EVENT")]
        INVALID_EVENT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_LEG_BET_TYPE")]
        INVALID_LEG_BET_TYPE = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_PARLAY_BET")]
        INVALID_PARLAY_BET = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LINE_CHANGED")]
        LINE_CHANGED = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LINE_DOES_NOT_BELONG_TO_EVENT")]
        LINE_DOES_NOT_BELONG_TO_EVENT = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LISTED_PITCHERS_SELECTION_ERROR")]
        LISTED_PITCHERS_SELECTION_ERROR = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ODDS_NO_LONGER_OFFERED_FOR_PARLAY_1")]
        ODDS_NO_LONGER_OFFERED_FOR_PARLAY_1 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ODDS_NO_LONGER_OFFERED_FOR_PARLAY_2")]
        ODDS_NO_LONGER_OFFERED_FOR_PARLAY_2 = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ODDS_NO_LONGER_OFFERED_FOR_PARLAY_3")]
        ODDS_NO_LONGER_OFFERED_FOR_PARLAY_3 = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFFLINE_EVENT")]
        OFFLINE_EVENT = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PAST_CUTOFFTIME")]
        PAST_CUTOFFTIME = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ERROR_1")]
        SYSTEM_ERROR_1 = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ERROR_2")]
        SYSTEM_ERROR_2 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ERROR_3")]
        SYSTEM_ERROR_3 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LINE_IS_NOT_AVAILABLE")]
        LINE_IS_NOT_AVAILABLE = 18,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ParlayBetBetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOSE")]
        LOSE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PENDING_ACCEPTANCE")]
        PENDING_ACCEPTANCE = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUNDED")]
        REFUNDED = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOT_ACCEPTED")]
        NOT_ACCEPTED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WON")]
        WON = 6,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ParlayLegLegBetType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"MONEYLINE")]
        MONEYLINE = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SPREAD")]
        SPREAD = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_POINTS")]
        TOTAL_POINTS = 2,
        
        [System.Runtime.Serialization.EnumMember(Value = @"TEAM_TOTAL_POINTS")]
        TEAM_TOTAL_POINTS = 3,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ParlayLegLegBetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOSE")]
        LOSE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PUSH")]
        PUSH = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUNDED")]
        REFUNDED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WON")]
        WON = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 5,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ParlayLegSide
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNDER")]
        UNDER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TeaserBetLegBetType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SPREAD")]
        SPREAD = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_POINTS")]
        TOTAL_POINTS = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TeaserBetLegSide
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNDER")]
        UNDER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceTeaserBetResponseErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ABOVE_MAX_BET_AMOUNT")]
        ABOVE_MAX_BET_AMOUNT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ALL_BETTING_CLOSED")]
        ALL_BETTING_CLOSED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BELOW_MIN_BET_AMOUNT")]
        BELOW_MIN_BET_AMOUNT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED_BETTING")]
        BLOCKED_BETTING = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED_CLIENT")]
        BLOCKED_CLIENT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DOUBLE_HIT")]
        DOUBLE_HIT = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DUPLICATE_CLIENT_REFERENCE_ID")]
        DUPLICATE_CLIENT_REFERENCE_ID = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INCOMPLETE_CUSTOMER_BETTING_PROFILE")]
        INCOMPLETE_CUSTOMER_BETTING_PROFILE = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INSUFFICIENT_FUNDS")]
        INSUFFICIENT_FUNDS = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_COUNTRY")]
        INVALID_COUNTRY = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CUSTOMER_PROFILE")]
        INVALID_CUSTOMER_PROFILE = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_LEGS")]
        INVALID_LEGS = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_REQUEST")]
        INVALID_REQUEST = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ODDS_FORMAT_MISMATCH")]
        ODDS_FORMAT_MISMATCH = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESUBMIT_REQUEST")]
        RESUBMIT_REQUEST = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TEASER_DOES_NOT_EXIST")]
        TEASER_DOES_NOT_EXIST = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SAME_EVENT_ONLY_REQUIRED")]
        SAME_EVENT_ONLY_REQUIRED = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ERROR_1")]
        SYSTEM_ERROR_1 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ERROR_2")]
        SYSTEM_ERROR_2 = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ERROR_3")]
        SYSTEM_ERROR_3 = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOO_FEW_LEGS")]
        TOO_FEW_LEGS = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOO_MANY_LEGS")]
        TOO_MANY_LEGS = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DUPLICATE_UNIQUE_REQUEST_ID")]
        DUPLICATE_UNIQUE_REQUEST_ID = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = 24,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PlaceTeaserBetLegResponseErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CANNOT_TEASER_LIVE_GAME")]
        CANNOT_TEASER_LIVE_GAME = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CHECK_TEASER_ERROR")]
        CHECK_TEASER_ERROR = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_EVENT")]
        INVALID_EVENT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_LEG_BET")]
        INVALID_LEG_BET = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_LEG_BET_TYPE")]
        INVALID_LEG_BET_TYPE = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LINE_CHANGED")]
        LINE_CHANGED = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LINE_DOES_NOT_BELONG_TO_EVENT")]
        LINE_DOES_NOT_BELONG_TO_EVENT = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OFFLINE_EVENT")]
        OFFLINE_EVENT = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PAST_CUTOFFTIME")]
        PAST_CUTOFFTIME = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"POINTS_ARE_NOT_ADJUSTED")]
        POINTS_ARE_NOT_ADJUSTED = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ERROR_1")]
        SYSTEM_ERROR_1 = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ERROR_2")]
        SYSTEM_ERROR_2 = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WAGER_DATA_MISSING")]
        WAGER_DATA_MISSING = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LINE_IS_NOT_AVAILABLE")]
        LINE_IS_NOT_AVAILABLE = 13,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SpecialBetRequestWinRiskStake
    {
        [System.Runtime.Serialization.EnumMember(Value = @"WIN")]
        WIN = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RISK")]
        RISK = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SpecialBetResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PROCESSED_WITH_ERROR")]
        PROCESSED_WITH_ERROR = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SpecialBetResponseErrorCode
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ALL_BETTING_CLOSED")]
        ALL_BETTING_CLOSED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ABOVE_MAX_BET_AMOUNT")]
        ABOVE_MAX_BET_AMOUNT = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BELOW_MIN_BET_AMOUNT")]
        BELOW_MIN_BET_AMOUNT = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED_BETTING")]
        BLOCKED_BETTING = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"BLOCKED_CLIENT")]
        BLOCKED_CLIENT = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CONTEST_NOT_FOUND")]
        CONTEST_NOT_FOUND = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DUPLICATE_UNIQUE_REQUEST_ID")]
        DUPLICATE_UNIQUE_REQUEST_ID = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INCOMPLETE_CUSTOMER_BETTING_PROFILE")]
        INCOMPLETE_CUSTOMER_BETTING_PROFILE = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INSUFFICIENT_FUNDS")]
        INSUFFICIENT_FUNDS = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_COUNTRY")]
        INVALID_COUNTRY = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_REQUEST")]
        INVALID_REQUEST = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LINE_CHANGED")]
        LINE_CHANGED = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PAST_CUTOFFTIME")]
        PAST_CUTOFFTIME = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_LOSS_LIMIT_EXCEEDED = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED")]
        RESPONSIBLE_BETTING_RISK_LIMIT_EXCEEDED = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"RESUBMIT_REQUEST")]
        RESUBMIT_REQUEST = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ERROR_1")]
        SYSTEM_ERROR_1 = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SYSTEM_ERROR_2")]
        SYSTEM_ERROR_2 = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNIQUE_REQUEST_ID_REQUIRED")]
        UNIQUE_REQUEST_ID_REQUIRED = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INVALID_CUSTOMER_PROFILE")]
        INVALID_CUSTOMER_PROFILE = 19,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SpecialBetBetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOSE")]
        LOSE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUNDED")]
        REFUNDED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WON")]
        WON = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SpecialBetV3BetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOSE")]
        LOSE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUNDED")]
        REFUNDED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WON")]
        WON = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TeaserBetBetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOSE")]
        LOSE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUNDED")]
        REFUNDED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WON")]
        WON = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum ManualBetBetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ACCEPTED")]
        ACCEPTED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOSE")]
        LOSE = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUNDED")]
        REFUNDED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WON")]
        WON = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TeaserLegLegBetType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"SPREAD")]
        SPREAD = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"TOTAL_POINTS")]
        TOTAL_POINTS = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TeaserLegLegBetStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CANCELLED")]
        CANCELLED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"LOSE")]
        LOSE = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PUSH")]
        PUSH = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"REFUNDED")]
        REFUNDED = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WON")]
        WON = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum TeaserLegSide
    {
        [System.Runtime.Serialization.EnumMember(Value = @"OVER")]
        OVER = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNDER")]
        UNDER = 1,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.27.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum BettingStatusResponseStatus
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ALL_BETTING_ENABLED")]
        ALL_BETTING_ENABLED = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ALL_LIVE_BETTING_CLOSED")]
        ALL_LIVE_BETTING_CLOSED = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ALL_BETTING_CLOSED")]
        ALL_BETTING_CLOSED = 2,
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.3.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BetsApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public BetsApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.1.3.0 (NJsonSchema v10.0.27.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BetsApiException<TResult> : BetsApiException
    {
        public TResult Result { get; private set; }

        public BetsApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108
